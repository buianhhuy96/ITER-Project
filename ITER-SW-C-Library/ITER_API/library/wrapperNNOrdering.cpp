//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: wrapperNNOrdering.cpp
//
// MATLAB Coder version            : 5.3
// C/C++ source code generated on  : 21-Jul-2022 16:01:17
//

// Include Files
#include "wrapperNNOrdering.h"
#include "rt_nonfinite.h"
#include "sortLE.h"
#include <cmath>
#include <string.h>

// Function Definitions
//
// Calculate Features
//
// Arguments    : const double markerPts[2][5]
//                double labels[5]
// Return Type  : void
//
namespace ITER {
void wrapperNNOrdering(const double markerPts[2][5], double labels[5])
{
  static const double d_a[15][30]{
      {0.29320663546084197,     0.38486956728474014,   -0.89049006970420275,
       -0.00020318343357153253, 0.19278237830673015,   -0.11126393830784209,
       -0.17719813690451705,    -0.10987415241326617,  0.40008092632468739,
       0.16092617122965253,     -0.17642302694718473,  -0.6081445036213462,
       -0.72997943560598844,    -0.064955800901357608, 0.9712457609839984,
       -1.2912738543560403,     -0.34091892795268458,  -0.90958360434403562,
       -0.70580181882666537,    -0.84509806377178454,  0.90418117843945633,
       -0.16134746200125386,    0.12205650072074296,   0.94652717020757282,
       0.23764034701414846,     -0.29211431217396933,  -0.79269362708327407,
       -0.15100399488807514,    -0.67844053695906215,  -0.39750279145400719},
      {0.23571020041477891,  -0.20273844553964412, 0.4689484986847362,
       -0.19410880363739969, -0.23054285193539162, -0.11708304387374348,
       0.080316543257290637, -0.73599754585894517, -0.077341881032705687,
       0.10242827073868103,  -0.21860852168537509, 0.4273377032070102,
       0.19858044579535641,  -0.22428224068113473, -0.22919208272557817,
       -0.20540273458765274, 0.21694445393475667,  0.28985190030060715,
       -0.70377575980575446, -0.49214663249399804, 0.31551115141406627,
       0.10637422868091734,  0.081580914204338925, -0.90194033567909726,
       0.27490589129234222,  -0.65119815659245384, 0.090809522079814284,
       -0.12608748547493084, -0.87065799973905589, 0.067746445658784224},
      {-0.26011319967460811,   0.025601050150667815,  -0.38124447174463505,
       0.18234490867031611,    -0.36213507489649915,  -0.22141662762821523,
       0.1952062078975168,     0.13044256614166841,   0.19775296169041756,
       -0.034242186548804086,  0.20044842208896704,   -0.063047640917340608,
       0.26805656099870889,    -0.14400939209766875,  -0.09848820570484744,
       -0.23647983695499947,   -0.36768745951041465,  -0.37827543340278125,
       0.087362682656099075,   -0.14911711018048351,  -0.14835014287945966,
       -0.0060025674443925326, 0.36440061045771982,   -0.09742892442402086,
       -0.80245187729863365,   -0.057434055857268858, -0.80185748720217032,
       0.12246818022464202,    0.037973610284644223,  0.36420547284320937},
      {-0.09547873203293418, -0.16369676308823253, -0.46124736189445215,
       -0.36846425201702115, 0.28890836757306904,  0.15306557933587031,
       0.050963907473916353, 0.707523353909836,    0.32325938257009346,
       0.091418833432456215, 0.33096251175094715,  0.19738541387530606,
       -0.49632222738435861, 0.37735476305561838,  -0.17177205161626677,
       0.48449074200278441,  -0.04414163097886744, -0.22437724607994178,
       0.330419657997102,    0.3591903417228457,   0.38253586938480422,
       0.16522240082335407,  0.060209295836156008, 0.18586366937034343,
       -0.23268862692349207, 0.081977952910934862, 0.11805098189126606,
       -0.63084397461385344, 0.46705411817219944,  -0.10035664671225668},
      {-0.30846216154766842,  -0.12145987963653176,  -0.2109470010334441,
       -0.39090427779283737,  0.77875146131971218,   0.45468236055105532,
       0.1041221637030235,    0.019946115887940874,  -0.46753862461809353,
       0.40648728827146624,   0.14407860357655608,   -0.055487262822918063,
       -0.23490844606075342,  -0.061385498289130438, -0.45980977205486184,
       -0.045647928714589121, -0.24928479439246687,  0.00011690408581704892,
       0.018832483720938167,  0.503556174669227,     0.21266274999726656,
       0.073051053134955163,  0.041184566059982275,  -0.39220439669204971,
       -0.071331328171082467, -0.057173050656208479, 0.13557913139707156,
       -0.19770967239540058,  0.20183435721988582,   0.316809319085576},
      {0.26490513134023774,    0.028006753448425493, 0.48797630621331223,
       -0.0072788144909342089, -1.8599847354367769,  0.55182894067529165,
       1.1037083358235216,     -2.6764082218373573,  0.075946575827494908,
       -1.2129754565628663,    -2.5069989521544755,  -1.549226651749785,
       0.88213298272057583,    -1.5094039269355892,  2.5924745405650618,
       -1.1614849412969437,    0.2757217865092218,   2.8632333831913788,
       -0.66916418776609643,   -2.6296738946008218,  0.51035447572769632,
       -1.6926448255801552,    -0.24661874693964603, 0.73948022624543019,
       0.88075738836194217,    -1.4408444045713222,  0.57717512539957516,
       0.27661799358010869,    -1.9492843557392643,  0.14809896163745509},
      {0.0820643423805972,   -0.20493832450366739, 0.0078006680591521452,
       0.36989108831781009,  0.35323853359126489,  -0.30408370420773451,
       -0.45032938043963633, 0.34762221323469217,  0.27107344961798324,
       0.034632565070808377, 0.38766576750393383,  0.23495028814070892,
       -0.68488459202500662, 0.021942340504425582, -0.073892704047926208,
       -0.48375095526779888, 0.4755061235743554,   -0.37779552803363042,
       -0.86844656617891058, 0.41806853965453794,  1.0249856222194311,
       -0.2174417584574023,  0.061960019062174,    -0.46693539976105697,
       -0.4337527942633802,  -0.30213584635061175, -0.516546053522151,
       0.097512900604582189, -0.806424426672358,   -0.048329861250193173},
      {0.05955950080314578,  0.0726115955311808,   0.45713991387951047,
       0.17699992808421863,  0.0760444053010287,   -0.20469204603243696,
       -0.17436030431045135, 0.15200622347184825,  -0.26532227272382158,
       0.54956545271766322,  0.025554460717323268, -0.20227207399911018,
       0.90092788583071448,  0.017044138558857565, 0.0950011927949922,
       0.8061606994770254,   -1.0181783800031572,  -0.47801017806223189,
       0.5122644048448175,   -0.32724007232708524, -0.80707453556236575,
       0.82386090261702583,  0.47678499065460817,  0.99796719143280155,
       0.53883945851366544,  -0.06851693589724682, 0.31514837266758139,
       -0.566175364190018,   0.52382507243053722,  0.20738684863966916},
      {-0.151809428614952,    0.003404845963603278, 0.239108525689222,
       0.027229754960936995,  0.81412088655103143,  -0.45354318745074496,
       -0.27083634455689903,  0.381880886016969,    0.37500233735073629,
       0.098048094118028145,  -0.0621583390054785,  -0.38166082182313793,
       1.4883349943525477,    -0.87331517733322306, -0.12213616608253031,
       -1.0704761694383855,   -1.2057193310490117,  0.18860300870785651,
       -1.27490583026564,     0.64881043405628,     0.10719613332277494,
       -1.0856609995813424,   -0.23314511466470825, -0.86341184594096,
       0.42247945502487894,   0.6096520919222842,   -0.61955228619193992,
       -0.081510148556975109, -1.2407801739077309,  -0.089430027419200073},
      {0.0759277001438395,    -0.022995089095590428, -0.2876283316278907,
       -0.021559797859675125, -0.23522163265017348,  0.65467182324461193,
       0.23590853307083259,   -1.0134581044834061,   -0.27684143256527982,
       -2.0958000124504634,   -0.21019156206932049,  0.13772955715529914,
       -1.9235195610732077,   0.96183375926912773,   0.95978026436735875,
       0.56594286572818087,   1.5854049247219701,    0.09485144207759344,
       0.65184347789790564,   -0.90275320572886153,  0.45140508151153985,
       0.8066203307572436,    0.045218801120811815,  1.2535939864047005,
       -0.44133018185126355,  -0.80507795288317752,  0.4102966912537665,
       -0.38107258394790838,  0.067599309001410174,  0.16663217237577924},
      {0.17637190548570289,   0.086502366262524846, -0.20701324020686254,
       0.051233038354428058,  -0.18553554594877855, 0.79950998653665684,
       0.3911825809672505,    -0.56708216322248728, -0.40457572050103596,
       0.32267876794484807,   -0.693392356661584,   -0.27621324092962135,
       0.32274236456623895,   -0.20738213138550687, 1.0060472668496381,
       -0.034538965808994085, -0.39729787445094245, 0.47957315432684033,
       0.550451901224974,     -1.2104442143407752,  0.16573992384092248,
       0.2006097673783816,    -0.13209774217562043, 0.39825802510369362,
       0.026294879313419284,  -0.42328036959585497, 0.33679509065804181,
       -0.048948910168262583, 0.09048271177808595,  0.033136340581839889},
      {-0.21555877300147511,  0.17791175979927976,   0.40524980533464161,
       -0.022658542752904721, 0.066534911594999843,  -0.20100556982060427,
       0.1937177819766974,    0.074863283808371872,  0.032150152378765416,
       0.49456368432595932,   0.27951297880624587,   -0.19777146801370743,
       0.18298505550537494,   -0.072117559718925472, -0.25571402863872833,
       -0.056373209775252661, -0.26679905149670136,  -0.054917916378443191,
       -0.34352917035843983,  0.13553160698152597,   -0.27399626827610368,
       -0.44503127091916561,  0.16244320277240559,   -0.63271301475958686,
       -0.14705108240370929,  -0.46690876376156,     -0.14944329493082573,
       -0.20601508427569165,  -0.21034126733102132,  -0.19677285583281628},
      {0.17672333171824034,    0.037553786970895606,  0.066620001704082082,
       0.043364463368347685,   0.17738725136696043,   0.089665563032256743,
       0.076982269161498543,   -0.16525055110729081,  -0.163455246954501,
       -0.013203426305211683,  -0.31610306197554788,  -0.38854415450384971,
       -0.0022092191569594525, -0.16369397888820378,  0.1540667460020412,
       0.44638472767912718,    -0.061704075522402535, 0.20166496033873915,
       0.11734979471446226,    -0.055224920494250811, -0.20971823585667923,
       -0.027164171318279935,  -0.38736533921862176,  0.79159118604460188,
       -0.55045924146696346,   0.23129127935387439,   0.10481331352057494,
       0.052604406797680719,   -0.14748425872715437,  0.1955083273186804},
      {0.040037079148239445,  0.12736660001322575,   0.41779918270413308,
       0.12828761447514206,   0.055148772133101764,  -0.024322670033250216,
       -0.11476887230360988,  0.11914452321236747,   -0.15164898823028369,
       0.48416038106961728,   -0.05666494217282797,  -0.067344644500339029,
       0.27778794855571204,   -0.1776923666441525,   0.055610232334347996,
       0.36586150416530283,   0.15071655734485817,   0.1173571392579015,
       0.52408487011419669,   -0.13441301057302588,  -0.55889279737809183,
       0.15570919375819509,   0.0096205452212867852, 0.55107357391743828,
       -0.096479970254741351, 0.40239342644155329,   0.20292803032827475,
       -0.41467247355689418,  -0.041579296352463158, -0.058812911494230256},
      {-0.10972036559002893,  -0.13368331847487416,  0.310527377939136,
       -0.084082112868295936, -0.1330159221580749,   -0.32872268992313697,
       0.087475820659580067,  0.29112539469689874,   0.1618974910793767,
       0.020756549061908915,  0.031742524458826242,  -0.22641076854977218,
       0.30393739534537795,   -0.18614117220391943,  -0.22352430142296575,
       0.24589037819829149,   0.30225816083863277,   0.11140667232740345,
       0.011587352970866148,  0.10387488762285073,   -0.55839482946975427,
       0.036484196116757781,  -0.014826254267159372, -0.52820697415567208,
       -0.10947373352354707,  -0.059434879734614372, -0.08060301194101982,
       0.10552251699654734,   0.30821893580879428,   0.0572501636906359}};
  static const double c_a[20][15]{
      {0.0596156993798949, 0.0216133363848296, -0.00714324298926271,
       -0.0573833949132163, -0.000514030765900196, 0.156616739108233,
       0.0675409542852452, -0.317986388677439, 0.361483940405979,
       -0.251406282009839, -0.0685821003816992, 0.457836012310926,
       -0.176546100906276, 0.288900332456937, -0.582755314650386},
      {-0.307908183271873, 0.394168436841781, 0.0473220176664263,
       0.0656794487086687, -0.484115148864874, -0.0736273292624188,
       -0.00137131668815605, -0.0521022103369591, -0.00722832919422005,
       0.0166424601580264, -0.00959843497895857, 0.00992639249223167,
       -0.00368356898582678, 0.00945889496997237, -0.0119468032318644},
      {0.0385080620453346, 0.0265628710914656, -0.0128822127155383,
       -0.0434194386741753, -0.0401297431854671, 0.141634438233953,
       0.0222078445736982, -0.186234758019966, 0.332739815732165,
       -0.250221835425217, 0.286964762637234, 0.2665103735934,
       -0.141143641937013, 0.144370058129837, 0.755940151514183},
      {-0.311615540298033, 0.371338062953966, -0.0383452397389158,
       -0.17249546786791, 0.480743656629823, -0.0157818862365251,
       0.00427602568115656, -0.0425473473446605, -0.011923527611055,
       0.0121212513391978, 0.0065045590245361, 0.00717021636742008,
       -0.000526863898719808, 0.00509856438700573, 0.0133256232917327},
      {0.0153861024587576, 0.0457243610447555, -0.0140595264643304,
       -0.0393136297654426, -0.0213519691415551, 0.138316948018057,
       0.0447905106779393, -0.0657489425945149, 0.213845208605159,
       -0.351903061104527, -0.0157672006826989, 0.0760039829115418,
       0.718820833923949, -0.524943087321933, -0.046404062214339},
      {-0.300241938327233, -0.274370469350471, -0.522082975006559,
       -0.219669746330598, -0.10632332171986, -0.0289401910565987,
       0.032112982438075, -0.0198817524096118, 0.000559101000958136,
       0.00732593767086409, -0.00293004505610487, 0.0100506216382924,
       -0.000218213406396173, -0.00357479242908296, -0.00225250512582738},
      {-0.0242472343770604, 0.0355619472987167, -0.0036863033382432,
       -0.0370238165070508, -0.0160011523648082, 0.134957918756,
       -0.0329507872563257, 0.120974803475108, 0.216602037287619,
       -0.291108810790762, -0.109665651593639, -0.259255375536826,
       -0.633216214353448, -0.588954142761185, -0.0619862080039017},
      {-0.301659129426952, -0.295543231119553, 0.469157131317158,
       -0.313726772718293, -0.04326456605055, -0.00748123441700517,
       -0.022079052029238, -0.0140344875390325, 0.0170538841753996,
       -0.00650252636457809, 0.00338267862879183, 0.00426088498153563,
       0.0115796864968499, 0.00359282727619623, 0.0010537772780162},
      {-0.0816849501668081, 0.0376710470725672, -0.025723713097029,
       0.0158700928374894, -0.0116061145937134, 0.213289317280001,
       -0.0633330035596764, 0.431608055114575, 0.365456256623766,
       -0.288284612619791, -0.0643690098595481, -0.51379902515064,
       0.161470255485727, 0.492234532478785, -0.0436428126848851},
      {-0.338184582154698, -0.196871280157873, 0.0374306245370015,
       0.552621912894816, 0.128527159893397, 0.0989596194671151,
       -0.00339866666518628, -0.110353685320409, 0.00852292409734309,
       -0.0293672539245443, 0.0171772101645553, 0.00220586838095175,
       -0.00435054543493605, -0.0180286057870924, -0.000420889613100949},
      {0.0629410374879199, 0.0179465820714799, -0.0110216799159704,
       -0.0747651235382919, -0.0294498064820014, 0.375124721561078,
       -0.0662371898080365, -0.484477998116753, 0.25703462209034,
       0.476042284769073, -0.463319182671155, -0.283314839467319,
       0.0569835550214084, -0.0110847569910169, 0.135380525002208},
      {-0.307908183271873, 0.394168436841781, 0.0473220176664265,
       0.0656794487086688, -0.484115148864875, -0.073627329262419,
       -0.00137131668815606, -0.0521022103369585, -0.0072283291942205,
       0.0166424601580269, -0.00959843497895821, 0.00992639249223102,
       -0.00368356898582721, 0.00945889496997101, -0.0119468032318632},
      {0.012365178888771, 0.0351563485122066, -0.0129927429698663,
       -0.0599573390634819, -0.0420909159964766, 0.36093939949295,
       -0.0293186931847027, -0.0701470643653691, 0.0793161118029888,
       0.315226662675919, 0.804372067171368, -0.194042814883782,
       0.00388715080058544, -0.0932902993810048, -0.240778377561492},
      {-0.311615540298033, 0.371338062953965, -0.0383452397389159,
       -0.17249546786791, 0.480743656629824, -0.0157818862365252,
       0.00427602568115645, -0.0425473473446605, -0.011923527611055,
       0.0121212513391979, 0.00650455902453617, 0.00717021636742048,
       -0.00052686389872002, 0.00509856438700508, 0.0133256232917319},
      {0.017349469626595, 0.0296057982284511, 0.0300587391961544,
       -0.0686598636116549, -0.0438215813085557, 0.402533274321434,
       0.688033548525128, -0.142821341824667, -0.4802023311217,
       -0.260159759280207, -0.0434123519308269, -0.154045609442261,
       -0.0374354650212577, 0.0955296683502787, 0.0323098686499558},
      {-0.300241938327233, -0.274370469350471, -0.522082975006559,
       -0.219669746330598, -0.10632332171986, -0.0289401910565985,
       0.0321129824380749, -0.0198817524096117, 0.000559101000958109,
       0.00732593767086409, -0.00293004505610456, 0.0100506216382929,
       -0.000218213406396284, -0.00357479242908246, -0.00225250512582783},
      {0.00726888345744863, 0.0298496953185276, -0.0461226995323358,
       -0.07279985277743, -0.0432175700768494, 0.406507545112071,
       -0.705390532995624, -0.0979943292090848, -0.476356983787585,
       -0.282228387305436, -0.0431814648324921, 0.0639963526418916,
       -0.0049436610059614, 0.0687040455288596, 0.00777853043810249},
      {-0.30165912942695, -0.295543231119567, 0.469157131317142,
       -0.313726772718291, -0.0432645660505429, -0.00748123441701696,
       -0.0220790520292483, -0.0140344875390187, 0.0170538841753906,
       -0.00650252636453938, 0.00338267862878089, 0.00426088498152429,
       0.0115796864968249, 0.00359282727628294, 0.00105377727798385},
      {-0.090276119515479, 0.0379381512153766, 0.00304564870556249,
       0.0133240972352617, -0.0275750333966496, 0.491510916874878,
       0.0923483107964219, 0.595589924759254, 0.0377435171933033,
       0.326207228118021, -0.17378660967683, 0.485886360638853,
       -0.0122158888259349, -0.0858040698035179, 0.0546858507263307},
      {-0.338184582154697, -0.196871280157883, 0.0374306245369932,
       0.552621912894818, 0.128527159893407, 0.0989596194671047,
       -0.00339866666520145, -0.11035368532039, 0.0085229240973387,
       -0.029367253924502, 0.0171772101645783, 0.00220586838093255,
       -0.00435054543495423, -0.0180286057869862, -0.000420889613012844}};
  static const double e_a[30][5]{
      {0.55910132395082712, -0.49088095274126542, 0.73926384372463549,
       -0.42878604249216784, 0.70250356608798692},
      {0.69654014391457819, -0.69218111642686908, 0.5878681849997669,
       -0.041023498541786073, 0.1004103855920559},
      {0.77654067185460107, -0.26721604849612918, -0.74313041182714712,
       -0.72027702182957765, 0.97775910172587044},
      {0.44135644161756571, 0.042220238756708946, 0.0855216716791246,
       0.28784069941907575, 0.055780252090343978},
      {0.32549009075426732, 0.8324240052286952, -0.5624729960066388,
       1.3668697851576064, -0.9626926513798596},
      {-0.89457543012441132, -0.9440903159614028, -0.6525014174877023,
       -0.40968802214333683, 0.16493521906215555},
      {-0.3754988193501882, 0.12493219990591166, 1.0520736525313255,
       -0.010371520350958709, 1.1329667935323546},
      {1.9442904637352496, -0.93688469008257713, -0.93333257395482661,
       0.35682899070188745, -1.2434426501641205},
      {-0.045255668861616541, 0.08910055514931696, 0.52886338962280921,
       0.19708960915373572, -0.17940162823844655},
      {1.1809628159683689, 0.66982858688799785, 0.11327362094912825,
       -0.73703021690350179, -1.3661318556463424},
      {0.94808073065350906, -0.68909500481349406, -1.5375287686634265,
       1.1899673470411143, -1.1306040996384048},
      {0.28194576189341719, 0.51175468362760623, -1.4362868976973449,
       1.0375143477876994, -0.15397957940362861},
      {1.3377270409516751, 0.61745356041946931, -0.023850104011312077,
       -2.0993401920714958, -0.47158187638232607},
      {-0.305029811895367, -0.62374050637333733, -1.2382495660727912,
       1.0740990534898129, 0.37947345626215251},
      {-0.093277692613406515, -0.81673296291141817, 2.3990802738576207,
       -1.2126513775186245, 1.2303296591993773},
      {0.44511449853452362, -0.052102506823413275, -1.3822577140525634,
       0.998640120740397, 1.16701098084164},
      {-1.3288903769240821, 0.14619335774983738, -0.11976477043842132,
       0.90605735556861355, 1.4760637043090343},
      {-1.9994005774349157, 0.76478346166942845, 1.9015512917102426,
       -1.3632107822404389, 2.531897921217598},
      {-0.1481875059787422, -0.70413428283477142, -1.34700395788687,
       0.29189244101460537, 1.1040368700389616},
      {1.9148860654127751, 1.5694787852531162, -1.5153296961906453,
       0.18264865395270796, -2.0355120138859841},
      {-1.1229965475552985, -0.57935961136219183, 0.23888896472916629,
       0.38956288113712, -0.70301964087093527},
      {-0.0013799507299261543, -0.86153006643649788, -2.0828756989005037,
       1.6501268091985721, 0.51337969790232685},
      {0.71207148693980915, 0.5917092977491919, 0.070822013949761148,
       0.795672519970291, 0.63668097851561956},
      {0.61207907977243536, -1.2723067002261685, 0.45850579458941743,
       0.67653579223675642, 1.4399645489123378},
      {0.42463980427447146, 0.30881522507340819, 0.57067504861989282,
       -1.1294405800900977, -0.10571292393158348},
      {2.0108471556173959, -0.22764820869783042, 0.41352052865951877,
       0.50192065050495061, -0.408001685007827},
      {-0.25565276930148051, 0.10673752696792572, -0.80824310274867017,
       0.039063533049795582, 0.48517061208641948},
      {0.41316318787325479, 0.503068518745122, 1.492913837409152,
       0.35281016372448942, 0.14460982772287614},
      {0.95843635993831189, 0.46032650301197353, -1.789742844324931,
       -0.1822110018995988, 0.57110429569049026},
      {-0.023998240900827954, 0.4756725185866183, -0.26611787627996586,
       -0.15063928371166288, 0.40654687513082854}};
  static const double b_dv[30]{
      -2.0071372440754192,  -2.0846780247973848,  1.4082554559314662,
      0.85724446134911048,  1.234355319661451,    -1.0870907516464106,
      -0.73549908617997306, -0.95090742782742832, 0.51226797413368452,
      -0.09165779173177277, -0.13663144039295691, 0.57977907320999167,
      0.5715017722638297,   -0.13055793972102653, -0.44805868482287348,
      0.38070846162337418,  0.11369260189416713,  0.34043031124832107,
      0.15550584080470006,  -0.10073493078342671, 0.6648554356385119,
      0.72702275243128534,  1.3597716429124875,   0.10367364293854905,
      1.0335757955312717,   -1.3558853694152007,  -1.2081535100043514,
      -1.8267242124833665,  2.0009563939931172,   -1.7036626443379339};
  static const double b_dv1[15]{
      0.908107303446967, 1.59048798372386, 1.79409906992424, 1.92730774138439,
      1.94682119342759,  2.82315107687296, 3.65581375689458, 4.78837013669057,
      5.82773080409737,  6.83254488830193, 9.03519578173264, 12.1227607046142,
      15.5631350056034,  17.5321119166046, 21.2895326987864};
  static const double b_dv2[15]{
      -1.76651638063803,     0.000382189394435495, 0.00143950621446491,
      0.0233927951097328,    0.00620784547531587,  0.00688012582644341,
      -0.00384791517233976,  0.104062606244368,    0.00282605043022257,
      0.0075985627488781,    -0.00425854725132311, -0.0137069059151199,
      -0.000826721121668277, 0.00133195348024186,  -0.000316183704815298};
  static const double dv4[5]{-1.0182944128097382, 0.42582191419541721,
                             -0.6242579133852485, -0.627123985406123,
                             -0.059708671848260751};
  static const signed char c_p[5][120]{
      {5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
      {4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
       5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
       5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
       5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
       5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2},
      {3, 3, 2, 2, 1, 1, 4, 4, 2, 2, 1, 1, 4, 4, 3, 3, 1, 1, 4, 4, 3, 3, 2, 2,
       3, 3, 2, 2, 1, 1, 5, 5, 2, 2, 1, 1, 5, 5, 3, 3, 1, 1, 5, 5, 3, 3, 2, 2,
       4, 4, 2, 2, 1, 1, 5, 5, 2, 2, 1, 1, 5, 5, 4, 4, 1, 1, 5, 5, 4, 4, 2, 2,
       4, 4, 3, 3, 1, 1, 5, 5, 3, 3, 1, 1, 5, 5, 4, 4, 1, 1, 5, 5, 4, 4, 3, 3,
       4, 4, 3, 3, 2, 2, 5, 5, 3, 3, 2, 2, 5, 5, 4, 4, 2, 2, 5, 5, 4, 4, 3, 3},
      {2, 1, 3, 1, 3, 2, 2, 1, 4, 1, 4, 2, 3, 1, 4, 1, 4, 3, 3, 2, 4, 2, 4, 3,
       2, 1, 3, 1, 3, 2, 2, 1, 5, 1, 5, 2, 3, 1, 5, 1, 5, 3, 3, 2, 5, 2, 5, 3,
       2, 1, 4, 1, 4, 2, 2, 1, 5, 1, 5, 2, 4, 1, 5, 1, 5, 4, 4, 2, 5, 2, 5, 4,
       3, 1, 4, 1, 4, 3, 3, 1, 5, 1, 5, 3, 4, 1, 5, 1, 5, 4, 4, 3, 5, 3, 5, 4,
       3, 2, 4, 2, 4, 3, 3, 2, 5, 2, 5, 3, 4, 2, 5, 2, 5, 4, 4, 3, 5, 3, 5, 4},
      {1, 2, 1, 3, 2, 3, 1, 2, 1, 4, 2, 4, 1, 3, 1, 4, 3, 4, 2, 3, 2, 4, 3, 4,
       1, 2, 1, 3, 2, 3, 1, 2, 1, 5, 2, 5, 1, 3, 1, 5, 3, 5, 2, 3, 2, 5, 3, 5,
       1, 2, 1, 4, 2, 4, 1, 2, 1, 5, 2, 5, 1, 4, 1, 5, 4, 5, 2, 4, 2, 5, 4, 5,
       1, 3, 1, 4, 3, 4, 1, 3, 1, 5, 3, 5, 1, 4, 1, 5, 4, 5, 3, 4, 3, 5, 4, 5,
       2, 3, 2, 4, 3, 4, 2, 3, 2, 5, 3, 5, 2, 4, 2, 5, 4, 5, 3, 4, 3, 5, 4, 5}};
  double b[5][30];
  double b_b[5][30];
  double c_y[5][30];
  double dv3[5][30];
  double sumProb[120];
  double x1[5][20];
  double xp1[5][15];
  double avgRowsRep[10][5];
  double inputMatrix[10][5];
  double b_y1[5][5];
  double c_b[5][5];
  double numerator[5][5];
  double b_a[10];
  double dists[2][5];
  double y[10];
  double denominator[5];
  double nmax[5];
  double ycol[5];
  double d2;
  double d3;
  double d4;
  double d5;
  double d6;
  double d8;
  int counts[10];
  int nz[10];
  int idx[5];
  int iwork[5];
  int b_i2;
  int b_i8;
  int b_idx;
  int b_iindx;
  int b_j;
  int b_k;
  int b_kEnd;
  int b_q;
  int b_t;
  int b_x1_tmp;
  int d_i;
  int d_j;
  int d_k;
  int d_t;
  int e_i;
  int g_i;
  int i11;
  int i13;
  int i14;
  int i15;
  int i16;
  int i17;
  int i18;
  int i2;
  int i5;
  int i6;
  int i9;
  int i_k;
  int iindx;
  int j;
  int j_k;
  int m_k;
  int p;
  int pEnd;
  int p_k;
  int qEnd;
  int q_k;
  int t_k;
  int u_k;
  int x1_tmp;
  bool isNaNInputMatrix_tmp[10][5];
  bool b_y;
  bool exitg1;
  //  normImagePts = [markerPts ones(size(markerPts, 1), 1)] *inv(K); %
  //  normalize normImagePts(:,3) = [];
#pragma omp parallel for num_threads(omp_get_max_threads()) private(           \
    b_k, b_kEnd, d_k, qEnd, b_q, p, pEnd, j, i2, b_i2, d_i, e_i, ycol, b_j,    \
    d_t, j_k, g_i, iwork, idx, dists, i13, i15)

  for (int pt1 = 0; pt1 < 5; pt1++) {
    for (j_k = 0; j_k < 2; j_k++) {
      for (d_t = 0; d_t < 5; d_t++) {
        dists[j_k][d_t] = markerPts[j_k][pt1] - markerPts[j_k][d_t];
      }
    }
    if (coder::internal::b_sortLE(dists, 1, 2)) {
      idx[0] = 1;
      idx[1] = 2;
    } else {
      idx[0] = 2;
      idx[1] = 1;
    }
    if (coder::internal::b_sortLE(dists, 3, 4)) {
      idx[2] = 3;
      idx[3] = 4;
    } else {
      idx[2] = 4;
      idx[3] = 3;
    }
    idx[4] = 5;
    g_i = 2;
    while (g_i < 5) {
      i2 = g_i * 2;
      j = 1;
      pEnd = g_i + 1;
      while (pEnd < 6) {
        p = j;
        b_q = pEnd;
        qEnd = j + i2;
        if (qEnd > 6) {
          qEnd = 6;
        }
        d_k = 0;
        b_kEnd = qEnd - j;
        while ((d_k + 1) <= b_kEnd) {
          i13 = idx[b_q - 1];
          i15 = idx[p - 1];
          if (coder::internal::b_sortLE(dists, i15, i13)) {
            iwork[d_k] = i15;
            p++;
            if (p == pEnd) {
              while (b_q < qEnd) {
                d_k++;
                iwork[d_k] = idx[b_q - 1];
                b_q++;
              }
            }
          } else {
            iwork[d_k] = i13;
            b_q++;
            if (b_q == qEnd) {
              while (p < pEnd) {
                d_k++;
                iwork[d_k] = idx[p - 1];
                p++;
              }
            }
          }
          d_k++;
        }
        for (b_k = 0; b_k < b_kEnd; b_k++) {
          idx[(j + b_k) - 1] = iwork[b_k];
        }
        j = qEnd;
        pEnd = qEnd + g_i;
      }
      g_i = i2;
    }
    for (b_j = 0; b_j < 2; b_j++) {
      for (e_i = 0; e_i < 5; e_i++) {
        ycol[e_i] = dists[b_j][idx[e_i] - 1];
      }
      for (d_i = 0; d_i < 5; d_i++) {
        dists[b_j][d_i] = ycol[d_i];
      }
    }
    for (b_i2 = 0; b_i2 < 10; b_i2++) {
      inputMatrix[b_i2][pt1] = (&dists[0][0])[b_i2];
    }
  }
  for (int k{0}; k < 10; k++) {
    double d;
    for (int b_i{0}; b_i < 5; b_i++) {
      isNaNInputMatrix_tmp[k][b_i] = std::isnan(inputMatrix[k][b_i]);
    }
    d = inputMatrix[k][0];
    if (std::isnan(d)) {
      y[k] = 0.0;
      counts[k] = 0;
    } else {
      y[k] = d;
      counts[k] = 1;
    }
    for (int h_k{0}; h_k < 4; h_k++) {
      double b_d1;
      b_d1 = inputMatrix[k][h_k + 1];
      if (!std::isnan(b_d1)) {
        y[k] += b_d1;
        counts[k]++;
      }
    }
  }
#pragma omp parallel for num_threads(omp_get_max_threads()) private(b_t)

  for (int c_k = 0; c_k < 10; c_k++) {
    b_a[c_k] = y[c_k] / (static_cast<double>(counts[c_k]));
    for (b_t = 0; b_t < 5; b_t++) {
      avgRowsRep[c_k][b_t] = b_a[c_k];
    }
  }
#pragma omp parallel for num_threads(omp_get_max_threads())

  for (int c_i = 0; c_i < 50; c_i++) {
    if (!(&isNaNInputMatrix_tmp[0][0])[c_i]) {
      (&avgRowsRep[0][0])[c_i] = (&inputMatrix[0][0])[c_i];
    }
  }
  for (int e_k{0}; e_k < 10; e_k++) {
    nz[e_k] = static_cast<int>(isNaNInputMatrix_tmp[e_k][0]);
    for (int g_k{0}; g_k < 4; g_k++) {
      nz[e_k] += static_cast<int>(isNaNInputMatrix_tmp[e_k][g_k + 1]);
    }
  }
#pragma omp parallel for num_threads(omp_get_max_threads())

  for (int i1 = 0; i1 < 10; i1++) {
    y[i1] = static_cast<double>(nz[i1]);
  }
  b_y = true;
  i_k = 0;
  exitg1 = false;
  while ((!exitg1) && (i_k < 10)) {
    if (!(y[i_k] == 0.0)) {
      b_y = false;
      exitg1 = true;
    } else {
      i_k++;
    }
  }
  if (b_y) {
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i5, x1_tmp)

    for (int i3 = 0; i3 < 5; i3++) {
      for (i5 = 0; i5 < 10; i5++) {
        x1_tmp = i5 * 2;
        x1[i3][x1_tmp] = inputMatrix[i5][i3];
        x1[i3][x1_tmp + 1] = 1.0;
      }
    }
  } else {
    // [x1,~] = fixunknowns(inputMatrix');
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i6,        \
                                                                    b_x1_tmp)

    for (int i4 = 0; i4 < 5; i4++) {
      for (i6 = 0; i6 < 10; i6++) {
        b_x1_tmp = i6 * 2;
        x1[i4][b_x1_tmp] = avgRowsRep[i6][i4];
        x1[i4][b_x1_tmp + 1] =
            static_cast<double>(isNaNInputMatrix_tmp[i6][i4]);
      }
    }
  }
  //  Call to NN
  // EXPORTEDNNKNUCKLE neural network simulation function.
  //
  //  Auto-generated by MATLAB, 28-Mar-2022 12:30:52.
  //
  //  [y1] = exportedNNKnuckle(x1) takes these arguments:
  //    x = 20xQ matrix, input #1
  //  and returns:
  //    y = 5xQ matrix, output #1
  //  where Q is the number of samples.
  //  ===== NEURAL NETWORK CONSTANTS =====
  //  Input 1
  //  Layer 1
  //  Layer 2
  //  ===== SIMULATION ========
  //  Dimensions
  //  samples
  //  Input 1
  //  Map Minimum and Maximum Input Processing Function
#pragma omp parallel for num_threads(omp_get_max_threads()) private(b_i8, d2,  \
                                                                    i9)

  for (int i7 = 0; i7 < 15; i7++) {
    for (i9 = 0; i9 < 5; i9++) {
      d2 = 0.0;
      for (b_i8 = 0; b_i8 < 20; b_i8++) {
        d2 += c_a[b_i8][i7] * x1[i9][b_i8];
      }
      xp1[i9][i7] = d2;
    }
  }
  //  ===== MODULE FUNCTIONS ========
  //  Map Standard Deviation and Mean Input Processing Function
  //  Layer 1
#pragma omp parallel for num_threads(omp_get_max_threads()) private(m_k, d3,   \
                                                                    p_k)

  for (int k_k = 0; k_k < 5; k_k++) {
    for (p_k = 0; p_k < 15; p_k++) {
      d3 = (xp1[k_k][p_k] - b_dv2[p_k]) * b_dv1[p_k];
      xp1[k_k][p_k] = d3;
    }
    for (m_k = 0; m_k < 30; m_k++) {
      b[k_k][m_k] = b_dv[m_k];
    }
  }
  //  Sigmoid Symmetric Transfer Function
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i11, d4,   \
                                                                    i16)

  for (int i10 = 0; i10 < 30; i10++) {
    for (i16 = 0; i16 < 5; i16++) {
      d4 = 0.0;
      for (i11 = 0; i11 < 15; i11++) {
        d4 += d_a[i11][i10] * xp1[i16][i11];
      }
      b_b[i16][i10] = b[i16][i10] + d4;
    }
  }
  //  Layer 2
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i14, q_k,  \
                                                                    d6, t_k)

  for (int o_k = 0; o_k < 5; o_k++) {
    for (t_k = 0; t_k < 30; t_k++) {
      d6 = std::exp(-2.0 * b_b[o_k][t_k]);
      c_y[o_k][t_k] = d6;
    }
    for (q_k = 0; q_k < 5; q_k++) {
      c_b[o_k][q_k] = dv4[q_k];
    }
    for (i14 = 0; i14 < 30; i14++) {
      dv3[o_k][i14] = (2.0 / (c_y[o_k][i14] + 1.0)) - 1.0;
    }
  }
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i17, d5,   \
                                                                    i18)

  for (int i12 = 0; i12 < 5; i12++) {
    for (i18 = 0; i18 < 5; i18++) {
      d5 = 0.0;
      for (i17 = 0; i17 < 30; i17++) {
        d5 += e_a[i17][i12] * dv3[i18][i17];
      }
      numerator[i18][i12] = c_b[i18][i12] + d5;
    }
  }
  //  Competitive Soft Transfer Function
  for (int c_j{0}; c_j < 5; c_j++) {
    nmax[c_j] = numerator[c_j][0];
    for (int h_i{0}; h_i < 4; h_i++) {
      double d7;
      bool b_p;
      d7 = numerator[c_j][h_i + 1];
      if (std::isnan(d7)) {
        b_p = false;
      } else if (std::isnan(nmax[c_j])) {
        b_p = true;
      } else {
        b_p = (nmax[c_j] < d7);
      }
      if (b_p) {
        nmax[c_j] = d7;
      }
    }
    for (int s_k{0}; s_k < 5; s_k++) {
      numerator[c_j][s_k] = std::exp(numerator[c_j][s_k] - nmax[c_j]);
    }
    denominator[c_j] = numerator[c_j][0];
    for (int v_k{0}; v_k < 4; v_k++) {
      denominator[c_j] += numerator[c_j][v_k + 1];
    }
  }
#pragma omp parallel for num_threads(omp_get_max_threads()) private(u_k)

  for (int r_k = 0; r_k < 5; r_k++) {
    if (denominator[r_k] == 0.0) {
      denominator[r_k] = 1.0;
    }
    for (u_k = 0; u_k < 5; u_k++) {
      b_y1[r_k][u_k] = numerator[r_k][u_k] / denominator[r_k];
    }
  }
  //  Output 1
  //
#pragma omp parallel for num_threads(omp_get_max_threads()) private(d_j, d8)

  for (int k_i = 0; k_i < 120; k_i++) {
    d8 = 0.0;
    for (d_j = 0; d_j < 5; d_j++) {
      d8 += b_y1[d_j][c_p[d_j][k_i] - 1];
    }
    sumProb[k_i] = d8;
  }
  if (!std::isnan(sumProb[0])) {
    b_idx = 1;
  } else {
    int w_k;
    b_idx = 0;
    w_k = 2;
    exitg1 = false;
    while ((!exitg1) && (w_k < 121)) {
      if (!std::isnan(sumProb[w_k - 1])) {
        b_idx = w_k;
        exitg1 = true;
      } else {
        w_k++;
      }
    }
  }
  if (b_idx == 0) {
    iindx = 1;
  } else {
    double b_ex;
    int i19;
    b_ex = sumProb[b_idx - 1];
    iindx = b_idx;
    i19 = b_idx + 1;
    for (int x_k{i19}; x_k < 121; x_k++) {
      double d9;
      d9 = sumProb[x_k - 1];
      if (b_ex < d9) {
        b_ex = d9;
        iindx = x_k;
      }
    }
  }
  b_iindx = iindx;
#pragma omp parallel for num_threads(omp_get_max_threads())

  for (int i20 = 0; i20 < 5; i20++) {
    labels[i20] = static_cast<double>(c_p[i20][b_iindx - 1]);
  }
  for (int e_j{0}; e_j < 5; e_j++) {
    // tmp(j) = probMatrix(labels(j),j);
    if (b_y1[e_j][(static_cast<int>(labels[e_j])) - 1] == 0.0) {
      labels[e_j] = 0.0;
    }
  }
}

} // namespace ITER

//
// File trailer for wrapperNNOrdering.cpp
//
// [EOF]
//
