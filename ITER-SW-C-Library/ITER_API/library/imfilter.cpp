//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: imfilter.cpp
//
// MATLAB Coder version            : 5.3
// C/C++ source code generated on  : 21-Jul-2022 16:01:17
//

// Include Files
#include "imfilter.h"
#include "rt_nonfinite.h"
#include "svd.h"
#include "coder_array.h"
#include "libmwimfilter.h"
#include "libmwippfilter.h"
#include <cmath>
#include <string.h>

// Function Definitions
//
// Arguments    : ::coder::array<float, 2U> &varargin_1
// Return Type  : void
//
namespace ITER {
namespace coder {
void b_imfilter(::coder::array<float, 2U> &varargin_1)
{
  static const bool conn[3]{true, false, true};
  ::coder::array<float, 2U> b_a;
  double kernel[3];
  double connDimsT[2];
  double finalSize[2];
  double kernelSizeT[2];
  double nonZeroKernel[2];
  double pad[2];
  double padSizeT[2];
  finalSize[0] = static_cast<double>(varargin_1.size(0));
  pad[0] = 0.0;
  finalSize[1] = static_cast<double>(varargin_1.size(1));
  pad[1] = 1.0;
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    bool tooBig;
    padImage(varargin_1, pad, b_a);
    tooBig = true;
    if ((finalSize[0] <= 65500.0) || (!(finalSize[1] > 65500.0))) {
      tooBig = false;
    }
    varargin_1.set_size(static_cast<int>(finalSize[0]),
                        static_cast<int>(finalSize[1]));
    if (!tooBig) {
      padSizeT[0] = static_cast<double>(b_a.size(0));
      padSizeT[1] = static_cast<double>(b_a.size(1));
      kernel[0] = -1.0;
      kernel[1] = 0.0;
      kernel[2] = 1.0;
      kernelSizeT[0] = 1.0;
      kernelSizeT[1] = 3.0;
      ippfilter_real32(&b_a[0], &varargin_1[0], &finalSize[0], 2.0,
                       &padSizeT[0], &kernel[0], &kernelSizeT[0], true);
    } else {
      padSizeT[0] = static_cast<double>(b_a.size(0));
      nonZeroKernel[0] = -1.0;
      connDimsT[0] = 1.0;
      padSizeT[1] = static_cast<double>(b_a.size(1));
      nonZeroKernel[1] = 1.0;
      connDimsT[1] = 3.0;
      imfilter_real32(&b_a[0], &varargin_1[0], 2.0, &finalSize[0], 2.0,
                      &padSizeT[0], &nonZeroKernel[0], 2.0, &conn[0], 2.0,
                      &connDimsT[0], &pad[0], 2.0, true, true);
    }
  }
}

//
// Arguments    : ::coder::array<float, 2U> &varargin_1
// Return Type  : void
//
void c_imfilter(::coder::array<float, 2U> &varargin_1)
{
  static const double kernel[7][7]{
      {0.0013419653598432805, 0.0040765308179236169, 0.0079399978434782879,
       0.0099158573267036573, 0.0079399978434782879, 0.0040765308179236169,
       0.0013419653598432805},
      {0.0040765308179236169, 0.012383407207635906, 0.02411958376255428,
       0.030121714902657252, 0.02411958376255428, 0.012383407207635906,
       0.0040765308179236169},
      {0.0079399978434782879, 0.02411958376255428, 0.046978534350396596,
       0.058669089490849466, 0.046978534350396596, 0.02411958376255428,
       0.0079399978434782879},
      {0.0099158573267036573, 0.030121714902657252, 0.058669089490849466,
       0.073268826056005834, 0.058669089490849466, 0.030121714902657252,
       0.0099158573267036573},
      {0.0079399978434782879, 0.02411958376255428, 0.046978534350396596,
       0.058669089490849466, 0.046978534350396596, 0.02411958376255428,
       0.0079399978434782879},
      {0.0040765308179236169, 0.012383407207635906, 0.02411958376255428,
       0.030121714902657252, 0.02411958376255428, 0.012383407207635906,
       0.0040765308179236169},
      {0.0013419653598432805, 0.0040765308179236169, 0.0079399978434782879,
       0.0099158573267036573, 0.0079399978434782879, 0.0040765308179236169,
       0.0013419653598432805}};
  static const double nonZeroKernel[49]{
      0.0013419653598432805, 0.0040765308179236169, 0.0079399978434782879,
      0.0099158573267036573, 0.0079399978434782879, 0.0040765308179236169,
      0.0013419653598432805, 0.0040765308179236169, 0.012383407207635906,
      0.02411958376255428,   0.030121714902657252,  0.02411958376255428,
      0.012383407207635906,  0.0040765308179236169, 0.0079399978434782879,
      0.02411958376255428,   0.046978534350396596,  0.058669089490849466,
      0.046978534350396596,  0.02411958376255428,   0.0079399978434782879,
      0.0099158573267036573, 0.030121714902657252,  0.058669089490849466,
      0.073268826056005834,  0.058669089490849466,  0.030121714902657252,
      0.0099158573267036573, 0.0079399978434782879, 0.02411958376255428,
      0.046978534350396596,  0.058669089490849466,  0.046978534350396596,
      0.02411958376255428,   0.0079399978434782879, 0.0040765308179236169,
      0.012383407207635906,  0.02411958376255428,   0.030121714902657252,
      0.02411958376255428,   0.012383407207635906,  0.0040765308179236169,
      0.0013419653598432805, 0.0040765308179236169, 0.0079399978434782879,
      0.0099158573267036573, 0.0079399978434782879, 0.0040765308179236169,
      0.0013419653598432805};
  ::coder::array<float, 2U> b_a;
  double connDimsT[2];
  double finalSize[2];
  double kernelSizeT[2];
  double pad[2];
  double padSizeT[2];
  int i1;
  bool conn[7][7];
  finalSize[0] = static_cast<double>(varargin_1.size(0));
  pad[0] = 3.0;
  finalSize[1] = static_cast<double>(varargin_1.size(1));
  pad[1] = 3.0;
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    bool tooBig;
    padImage(varargin_1, pad, b_a);
    tooBig = true;
    if ((finalSize[0] <= 65500.0) || (!(finalSize[1] > 65500.0))) {
      tooBig = false;
    }
    varargin_1.set_size(static_cast<int>(finalSize[0]),
                        static_cast<int>(finalSize[1]));
    if (!tooBig) {
      padSizeT[0] = static_cast<double>(b_a.size(0));
      kernelSizeT[0] = 7.0;
      padSizeT[1] = static_cast<double>(b_a.size(1));
      kernelSizeT[1] = 7.0;
      ippfilter_real32(&b_a[0], &varargin_1[0], &finalSize[0], 2.0,
                       &padSizeT[0], &kernel[0][0], &kernelSizeT[0], false);
    } else {
      padSizeT[0] = static_cast<double>(b_a.size(0));
      padSizeT[1] = static_cast<double>(b_a.size(1));
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i1)

      for (int b_i = 0; b_i < 7; b_i++) {
        for (i1 = 0; i1 < 7; i1++) {
          conn[b_i][i1] = true;
        }
      }
      connDimsT[0] = 7.0;
      connDimsT[1] = 7.0;
      imfilter_real32(&b_a[0], &varargin_1[0], 2.0, &finalSize[0], 2.0,
                      &padSizeT[0], &nonZeroKernel[0], 49.0, &conn[0][0], 2.0,
                      &connDimsT[0], &pad[0], 2.0, true, false);
    }
  }
}

//
// Arguments    : ::coder::array<float, 2U> &varargin_1
// Return Type  : void
//
void d_imfilter(::coder::array<float, 2U> &varargin_1)
{
  static const double e_x[841]{
      4.762497578988648E-8,   1.1073138628049746E-7,  2.418595836966E-7,
      4.9626364363668783E-7,  9.5657320969368355E-7,  1.7321303136116663E-6,
      2.9464529177220853E-6,  4.70841835601366E-6,    7.0681731091607814E-6,
      9.96772173790034E-6,    1.320508583762077E-5,   1.643399484969634E-5,
      1.9213286523034621E-5,  2.1101667084725539E-5,  2.1771505901906385E-5,
      2.1101667084725539E-5,  1.9213286523034621E-5,  1.643399484969634E-5,
      1.320508583762077E-5,   9.96772173790034E-6,    7.0681731091607814E-6,
      4.70841835601366E-6,    2.9464529177220853E-6,  1.7321303136116663E-6,
      9.5657320969368355E-7,  4.9626364363668783E-7,  2.418595836966E-7,
      1.1073138628049746E-7,  4.762497578988648E-8,   1.1073138628049746E-7,
      2.5745818668121091E-7,  5.6234038010021961E-7,  1.15384754131824E-6,
      2.2240993476926882E-6,  4.02732363982478E-6,    6.8507082844306217E-6,
      1.0947400667459241E-5,  1.643399484969634E-5,   2.317564739487682E-5,
      3.0702744442407152E-5,  3.8210182822179428E-5,  4.4672229568919093E-5,
      4.9062845919963714E-5,  5.0620267831066813E-5,  4.9062845919963714E-5,
      4.4672229568919093E-5,  3.8210182822179428E-5,  3.0702744442407152E-5,
      2.317564739487682E-5,   1.643399484969634E-5,   1.0947400667459241E-5,
      6.8507082844306217E-6,  4.02732363982478E-6,    2.2240993476926882E-6,
      1.15384754131824E-6,    5.6234038010021961E-7,  2.5745818668121091E-7,
      1.1073138628049746E-7,  2.418595836966E-7,      5.6234038010021961E-7,
      1.2282643141692625E-6,  2.5202347353049072E-6,  4.8578795985648562E-6,
      8.79648355952219E-6,    1.4963322589514633E-5,  2.3911321414187913E-5,
      3.5895144875646433E-5,  5.0620267831066813E-5,  6.70609593053704E-5,
      8.3458712301617293E-5,  9.75731200453745E-5,    0.00010716310783930649,
      0.00011056483004031986, 0.00010716310783930649, 9.75731200453745E-5,
      8.3458712301617293E-5,  6.70609593053704E-5,    5.0620267831066813E-5,
      3.5895144875646433E-5,  2.3911321414187913E-5,  1.4963322589514633E-5,
      8.79648355952219E-6,    4.8578795985648562E-6,  2.5202347353049072E-6,
      1.2282643141692625E-6,  5.6234038010021961E-7,  2.418595836966E-7,
      4.9626364363668783E-7,  1.15384754131824E-6,    2.5202347353049072E-6,
      5.1711859147624051E-6,  9.96772173790034E-6,    1.8049212339316831E-5,
      3.0702744442407152E-5,  4.9062845919963714E-5,  7.3652055099876124E-5,
      0.00010386604562762829, 0.00013760015419691886, 0.00017124615872978079,
      0.00020020704300665763, 0.00021988442031918191, 0.00022686430107607769,
      0.00021988442031918191, 0.00020020704300665763, 0.00017124615872978079,
      0.00013760015419691886, 0.00010386604562762829, 7.3652055099876124E-5,
      4.9062845919963714E-5,  3.0702744442407152E-5,  1.8049212339316831E-5,
      9.96772173790034E-6,    5.1711859147624051E-6,  2.5202347353049072E-6,
      1.15384754131824E-6,    4.9626364363668783E-7,  9.5657320969368355E-7,
      2.2240993476926882E-6,  4.8578795985648562E-6,  9.96772173790034E-6,
      1.9213286523034621E-5,  3.4790767369819757E-5,  5.9181088871340979E-5,
      9.4571110739526937E-5,  0.00014196805196353105, 0.00020020704300665763,
      0.00026523123916539452, 0.00033008561034905177, 0.00038590917587419588,
      0.00042383831337106868, 0.00043729238566613893, 0.00042383831337106868,
      0.00038590917587419588, 0.00033008561034905177, 0.00026523123916539452,
      0.00020020704300665763, 0.00014196805196353105, 9.4571110739526937E-5,
      5.9181088871340979E-5,  3.4790767369819757E-5,  1.9213286523034621E-5,
      9.96772173790034E-6,    4.8578795985648562E-6,  2.2240993476926882E-6,
      9.5657320969368355E-7,  1.7321303136116663E-6,  4.02732363982478E-6,
      8.79648355952219E-6,    1.8049212339316831E-5,  3.4790767369819757E-5,
      6.2997941176267855E-5,  0.00010716310783930649, 0.00017124615872978079,
      0.00025707093182044413, 0.00036252812087580268, 0.00048027172914687926,
      0.000597707824114883,   0.00069879124259254743, 0.00076747203791663592,
      0.00079183421556039055, 0.00076747203791663592, 0.00069879124259254743,
      0.000597707824114883,   0.00048027172914687926, 0.00036252812087580268,
      0.00025707093182044413, 0.00017124615872978079, 0.00010716310783930649,
      6.2997941176267855E-5,  3.4790767369819757E-5,  1.8049212339316831E-5,
      8.79648355952219E-6,    4.02732363982478E-6,    1.7321303136116663E-6,
      2.9464529177220853E-6,  6.8507082844306217E-6,  1.4963322589514633E-5,
      3.0702744442407152E-5,  5.9181088871340979E-5,  0.00010716310783930649,
      0.00018229058707881985, 0.00029129952872078386, 0.00043729238566613893,
      0.00061668110714116378, 0.00081696973173665637, 0.0010167352585825414,
      0.00118868394567977,    0.0013055139140625664,  0.0013469553742324028,
      0.0013055139140625664,  0.00118868394567977,    0.0010167352585825414,
      0.00081696973173665637, 0.00061668110714116378, 0.00043729238566613893,
      0.00029129952872078386, 0.00018229058707881985, 0.00010716310783930649,
      5.9181088871340979E-5,  3.0702744442407152E-5,  1.4963322589514633E-5,
      6.8507082844306217E-6,  2.9464529177220853E-6,  4.70841835601366E-6,
      1.0947400667459241E-5,  2.3911321414187913E-5,  4.9062845919963714E-5,
      9.4571110739526937E-5,  0.00017124615872978079, 0.00029129952872078386,
      0.00046549532146857644, 0.00069879124259254743, 0.00098545360328209861,
      0.0013055139140625664,  0.0016247383170192816,  0.0018995115366256382,
      0.0020862052945192231,  0.0021524285593099318,  0.0020862052945192231,
      0.0018995115366256382,  0.0016247383170192816,  0.0013055139140625664,
      0.00098545360328209861, 0.00069879124259254743, 0.00046549532146857644,
      0.00029129952872078386, 0.00017124615872978079, 9.4571110739526937E-5,
      4.9062845919963714E-5,  2.3911321414187913E-5,  1.0947400667459241E-5,
      4.70841835601366E-6,    7.0681731091607814E-6,  1.643399484969634E-5,
      3.5895144875646433E-5,  7.3652055099876124E-5,  0.00014196805196353105,
      0.00025707093182044413, 0.00043729238566613893, 0.00069879124259254743,
      0.0010490099002144323,  0.0014793410721772144,  0.0019598085053819927,
      0.0024390210923189073,  0.0028515045496265278,  0.0031317650743749757,
      0.0032311779693223177,  0.0031317650743749757,  0.0028515045496265278,
      0.0024390210923189073,  0.0019598085053819927,  0.0014793410721772144,
      0.0010490099002144323,  0.00069879124259254743, 0.00043729238566613893,
      0.00025707093182044413, 0.00014196805196353105, 7.3652055099876124E-5,
      3.5895144875646433E-5,  1.643399484969634E-5,   7.0681731091607814E-6,
      9.96772173790034E-6,    2.317564739487682E-5,   5.0620267831066813E-5,
      0.00010386604562762829, 0.00020020704300665763, 0.00036252812087580268,
      0.00061668110714116378, 0.00098545360328209861, 0.0014793410721772144,
      0.0020862052945192231,  0.0027637729777585307,  0.0034395710441210686,
      0.0040212659545924428,  0.0044164966431546448,  0.0045566912958167217,
      0.0044164966431546448,  0.0040212659545924428,  0.0034395710441210686,
      0.0027637729777585307,  0.0020862052945192231,  0.0014793410721772144,
      0.00098545360328209861, 0.00061668110714116378, 0.00036252812087580268,
      0.00020020704300665763, 0.00010386604562762829, 5.0620267831066813E-5,
      2.317564739487682E-5,   9.96772173790034E-6,    1.320508583762077E-5,
      3.0702744442407152E-5,  6.70609593053704E-5,    0.00013760015419691886,
      0.00026523123916539452, 0.00048027172914687926, 0.00081696973173665637,
      0.0013055139140625664,  0.0019598085053819927,  0.0027637729777585307,
      0.0036614043175211934,  0.0045566912958167217,  0.0053273118474393517,
      0.0058509074398284712,  0.0060366351789304775,  0.0058509074398284712,
      0.0053273118474393517,  0.0045566912958167217,  0.0036614043175211934,
      0.0027637729777585307,  0.0019598085053819927,  0.0013055139140625664,
      0.00081696973173665637, 0.00048027172914687926, 0.00026523123916539452,
      0.00013760015419691886, 6.70609593053704E-5,    3.0702744442407152E-5,
      1.320508583762077E-5,   1.643399484969634E-5,   3.8210182822179428E-5,
      8.3458712301617293E-5,  0.00017124615872978079, 0.00033008561034905177,
      0.000597707824114883,   0.0010167352585825414,  0.0016247383170192816,
      0.0024390210923189073,  0.0034395710441210686,  0.0045566912958167217,
      0.0056708939425266546,  0.0066299467144788158,  0.0072815719575447758,
      0.0075127138634271586,  0.0072815719575447758,  0.0066299467144788158,
      0.0056708939425266546,  0.0045566912958167217,  0.0034395710441210686,
      0.0024390210923189073,  0.0016247383170192816,  0.0010167352585825414,
      0.000597707824114883,   0.00033008561034905177, 0.00017124615872978079,
      8.3458712301617293E-5,  3.8210182822179428E-5,  1.643399484969634E-5,
      1.9213286523034621E-5,  4.4672229568919093E-5,  9.75731200453745E-5,
      0.00020020704300665763, 0.00038590917587419588, 0.00069879124259254743,
      0.00118868394567977,    0.0018995115366256382,  0.0028515045496265278,
      0.0040212659545924428,  0.0053273118474393517,  0.0066299467144788158,
      0.0077511930010180849,  0.0085130200926761858,  0.0087832523585260544,
      0.0085130200926761858,  0.0077511930010180849,  0.0066299467144788158,
      0.0053273118474393517,  0.0040212659545924428,  0.0028515045496265278,
      0.0018995115366256382,  0.00118868394567977,    0.00069879124259254743,
      0.00038590917587419588, 0.00020020704300665763, 9.75731200453745E-5,
      4.4672229568919093E-5,  1.9213286523034621E-5,  2.1101667084725539E-5,
      4.9062845919963714E-5,  0.00010716310783930649, 0.00021988442031918191,
      0.00042383831337106868, 0.00076747203791663592, 0.0013055139140625664,
      0.0020862052945192231,  0.0031317650743749757,  0.0044164966431546448,
      0.0058509074398284712,  0.0072815719575447758,  0.0085130200926761858,
      0.0093497234669282052,  0.00964651554894283,    0.0093497234669282052,
      0.0085130200926761858,  0.0072815719575447758,  0.0058509074398284712,
      0.0044164966431546448,  0.0031317650743749757,  0.0020862052945192231,
      0.0013055139140625664,  0.00076747203791663592, 0.00042383831337106868,
      0.00021988442031918191, 0.00010716310783930649, 4.9062845919963714E-5,
      2.1101667084725539E-5,  2.1771505901906385E-5,  5.0620267831066813E-5,
      0.00011056483004031986, 0.00022686430107607769, 0.00043729238566613893,
      0.00079183421556039055, 0.0013469553742324028,  0.0021524285593099318,
      0.0032311779693223177,  0.0045566912958167217,  0.0060366351789304775,
      0.0075127138634271586,  0.0087832523585260544,  0.00964651554894283,
      0.0099527288229593527,  0.00964651554894283,    0.0087832523585260544,
      0.0075127138634271586,  0.0060366351789304775,  0.0045566912958167217,
      0.0032311779693223177,  0.0021524285593099318,  0.0013469553742324028,
      0.00079183421556039055, 0.00043729238566613893, 0.00022686430107607769,
      0.00011056483004031986, 5.0620267831066813E-5,  2.1771505901906385E-5,
      2.1101667084725539E-5,  4.9062845919963714E-5,  0.00010716310783930649,
      0.00021988442031918191, 0.00042383831337106868, 0.00076747203791663592,
      0.0013055139140625664,  0.0020862052945192231,  0.0031317650743749757,
      0.0044164966431546448,  0.0058509074398284712,  0.0072815719575447758,
      0.0085130200926761858,  0.0093497234669282052,  0.00964651554894283,
      0.0093497234669282052,  0.0085130200926761858,  0.0072815719575447758,
      0.0058509074398284712,  0.0044164966431546448,  0.0031317650743749757,
      0.0020862052945192231,  0.0013055139140625664,  0.00076747203791663592,
      0.00042383831337106868, 0.00021988442031918191, 0.00010716310783930649,
      4.9062845919963714E-5,  2.1101667084725539E-5,  1.9213286523034621E-5,
      4.4672229568919093E-5,  9.75731200453745E-5,    0.00020020704300665763,
      0.00038590917587419588, 0.00069879124259254743, 0.00118868394567977,
      0.0018995115366256382,  0.0028515045496265278,  0.0040212659545924428,
      0.0053273118474393517,  0.0066299467144788158,  0.0077511930010180849,
      0.0085130200926761858,  0.0087832523585260544,  0.0085130200926761858,
      0.0077511930010180849,  0.0066299467144788158,  0.0053273118474393517,
      0.0040212659545924428,  0.0028515045496265278,  0.0018995115366256382,
      0.00118868394567977,    0.00069879124259254743, 0.00038590917587419588,
      0.00020020704300665763, 9.75731200453745E-5,    4.4672229568919093E-5,
      1.9213286523034621E-5,  1.643399484969634E-5,   3.8210182822179428E-5,
      8.3458712301617293E-5,  0.00017124615872978079, 0.00033008561034905177,
      0.000597707824114883,   0.0010167352585825414,  0.0016247383170192816,
      0.0024390210923189073,  0.0034395710441210686,  0.0045566912958167217,
      0.0056708939425266546,  0.0066299467144788158,  0.0072815719575447758,
      0.0075127138634271586,  0.0072815719575447758,  0.0066299467144788158,
      0.0056708939425266546,  0.0045566912958167217,  0.0034395710441210686,
      0.0024390210923189073,  0.0016247383170192816,  0.0010167352585825414,
      0.000597707824114883,   0.00033008561034905177, 0.00017124615872978079,
      8.3458712301617293E-5,  3.8210182822179428E-5,  1.643399484969634E-5,
      1.320508583762077E-5,   3.0702744442407152E-5,  6.70609593053704E-5,
      0.00013760015419691886, 0.00026523123916539452, 0.00048027172914687926,
      0.00081696973173665637, 0.0013055139140625664,  0.0019598085053819927,
      0.0027637729777585307,  0.0036614043175211934,  0.0045566912958167217,
      0.0053273118474393517,  0.0058509074398284712,  0.0060366351789304775,
      0.0058509074398284712,  0.0053273118474393517,  0.0045566912958167217,
      0.0036614043175211934,  0.0027637729777585307,  0.0019598085053819927,
      0.0013055139140625664,  0.00081696973173665637, 0.00048027172914687926,
      0.00026523123916539452, 0.00013760015419691886, 6.70609593053704E-5,
      3.0702744442407152E-5,  1.320508583762077E-5,   9.96772173790034E-6,
      2.317564739487682E-5,   5.0620267831066813E-5,  0.00010386604562762829,
      0.00020020704300665763, 0.00036252812087580268, 0.00061668110714116378,
      0.00098545360328209861, 0.0014793410721772144,  0.0020862052945192231,
      0.0027637729777585307,  0.0034395710441210686,  0.0040212659545924428,
      0.0044164966431546448,  0.0045566912958167217,  0.0044164966431546448,
      0.0040212659545924428,  0.0034395710441210686,  0.0027637729777585307,
      0.0020862052945192231,  0.0014793410721772144,  0.00098545360328209861,
      0.00061668110714116378, 0.00036252812087580268, 0.00020020704300665763,
      0.00010386604562762829, 5.0620267831066813E-5,  2.317564739487682E-5,
      9.96772173790034E-6,    7.0681731091607814E-6,  1.643399484969634E-5,
      3.5895144875646433E-5,  7.3652055099876124E-5,  0.00014196805196353105,
      0.00025707093182044413, 0.00043729238566613893, 0.00069879124259254743,
      0.0010490099002144323,  0.0014793410721772144,  0.0019598085053819927,
      0.0024390210923189073,  0.0028515045496265278,  0.0031317650743749757,
      0.0032311779693223177,  0.0031317650743749757,  0.0028515045496265278,
      0.0024390210923189073,  0.0019598085053819927,  0.0014793410721772144,
      0.0010490099002144323,  0.00069879124259254743, 0.00043729238566613893,
      0.00025707093182044413, 0.00014196805196353105, 7.3652055099876124E-5,
      3.5895144875646433E-5,  1.643399484969634E-5,   7.0681731091607814E-6,
      4.70841835601366E-6,    1.0947400667459241E-5,  2.3911321414187913E-5,
      4.9062845919963714E-5,  9.4571110739526937E-5,  0.00017124615872978079,
      0.00029129952872078386, 0.00046549532146857644, 0.00069879124259254743,
      0.00098545360328209861, 0.0013055139140625664,  0.0016247383170192816,
      0.0018995115366256382,  0.0020862052945192231,  0.0021524285593099318,
      0.0020862052945192231,  0.0018995115366256382,  0.0016247383170192816,
      0.0013055139140625664,  0.00098545360328209861, 0.00069879124259254743,
      0.00046549532146857644, 0.00029129952872078386, 0.00017124615872978079,
      9.4571110739526937E-5,  4.9062845919963714E-5,  2.3911321414187913E-5,
      1.0947400667459241E-5,  4.70841835601366E-6,    2.9464529177220853E-6,
      6.8507082844306217E-6,  1.4963322589514633E-5,  3.0702744442407152E-5,
      5.9181088871340979E-5,  0.00010716310783930649, 0.00018229058707881985,
      0.00029129952872078386, 0.00043729238566613893, 0.00061668110714116378,
      0.00081696973173665637, 0.0010167352585825414,  0.00118868394567977,
      0.0013055139140625664,  0.0013469553742324028,  0.0013055139140625664,
      0.00118868394567977,    0.0010167352585825414,  0.00081696973173665637,
      0.00061668110714116378, 0.00043729238566613893, 0.00029129952872078386,
      0.00018229058707881985, 0.00010716310783930649, 5.9181088871340979E-5,
      3.0702744442407152E-5,  1.4963322589514633E-5,  6.8507082844306217E-6,
      2.9464529177220853E-6,  1.7321303136116663E-6,  4.02732363982478E-6,
      8.79648355952219E-6,    1.8049212339316831E-5,  3.4790767369819757E-5,
      6.2997941176267855E-5,  0.00010716310783930649, 0.00017124615872978079,
      0.00025707093182044413, 0.00036252812087580268, 0.00048027172914687926,
      0.000597707824114883,   0.00069879124259254743, 0.00076747203791663592,
      0.00079183421556039055, 0.00076747203791663592, 0.00069879124259254743,
      0.000597707824114883,   0.00048027172914687926, 0.00036252812087580268,
      0.00025707093182044413, 0.00017124615872978079, 0.00010716310783930649,
      6.2997941176267855E-5,  3.4790767369819757E-5,  1.8049212339316831E-5,
      8.79648355952219E-6,    4.02732363982478E-6,    1.7321303136116663E-6,
      9.5657320969368355E-7,  2.2240993476926882E-6,  4.8578795985648562E-6,
      9.96772173790034E-6,    1.9213286523034621E-5,  3.4790767369819757E-5,
      5.9181088871340979E-5,  9.4571110739526937E-5,  0.00014196805196353105,
      0.00020020704300665763, 0.00026523123916539452, 0.00033008561034905177,
      0.00038590917587419588, 0.00042383831337106868, 0.00043729238566613893,
      0.00042383831337106868, 0.00038590917587419588, 0.00033008561034905177,
      0.00026523123916539452, 0.00020020704300665763, 0.00014196805196353105,
      9.4571110739526937E-5,  5.9181088871340979E-5,  3.4790767369819757E-5,
      1.9213286523034621E-5,  9.96772173790034E-6,    4.8578795985648562E-6,
      2.2240993476926882E-6,  9.5657320969368355E-7,  4.9626364363668783E-7,
      1.15384754131824E-6,    2.5202347353049072E-6,  5.1711859147624051E-6,
      9.96772173790034E-6,    1.8049212339316831E-5,  3.0702744442407152E-5,
      4.9062845919963714E-5,  7.3652055099876124E-5,  0.00010386604562762829,
      0.00013760015419691886, 0.00017124615872978079, 0.00020020704300665763,
      0.00021988442031918191, 0.00022686430107607769, 0.00021988442031918191,
      0.00020020704300665763, 0.00017124615872978079, 0.00013760015419691886,
      0.00010386604562762829, 7.3652055099876124E-5,  4.9062845919963714E-5,
      3.0702744442407152E-5,  1.8049212339316831E-5,  9.96772173790034E-6,
      5.1711859147624051E-6,  2.5202347353049072E-6,  1.15384754131824E-6,
      4.9626364363668783E-7,  2.418595836966E-7,      5.6234038010021961E-7,
      1.2282643141692625E-6,  2.5202347353049072E-6,  4.8578795985648562E-6,
      8.79648355952219E-6,    1.4963322589514633E-5,  2.3911321414187913E-5,
      3.5895144875646433E-5,  5.0620267831066813E-5,  6.70609593053704E-5,
      8.3458712301617293E-5,  9.75731200453745E-5,    0.00010716310783930649,
      0.00011056483004031986, 0.00010716310783930649, 9.75731200453745E-5,
      8.3458712301617293E-5,  6.70609593053704E-5,    5.0620267831066813E-5,
      3.5895144875646433E-5,  2.3911321414187913E-5,  1.4963322589514633E-5,
      8.79648355952219E-6,    4.8578795985648562E-6,  2.5202347353049072E-6,
      1.2282643141692625E-6,  5.6234038010021961E-7,  2.418595836966E-7,
      1.1073138628049746E-7,  2.5745818668121091E-7,  5.6234038010021961E-7,
      1.15384754131824E-6,    2.2240993476926882E-6,  4.02732363982478E-6,
      6.8507082844306217E-6,  1.0947400667459241E-5,  1.643399484969634E-5,
      2.317564739487682E-5,   3.0702744442407152E-5,  3.8210182822179428E-5,
      4.4672229568919093E-5,  4.9062845919963714E-5,  5.0620267831066813E-5,
      4.9062845919963714E-5,  4.4672229568919093E-5,  3.8210182822179428E-5,
      3.0702744442407152E-5,  2.317564739487682E-5,   1.643399484969634E-5,
      1.0947400667459241E-5,  6.8507082844306217E-6,  4.02732363982478E-6,
      2.2240993476926882E-6,  1.15384754131824E-6,    5.6234038010021961E-7,
      2.5745818668121091E-7,  1.1073138628049746E-7,  4.762497578988648E-8,
      1.1073138628049746E-7,  2.418595836966E-7,      4.9626364363668783E-7,
      9.5657320969368355E-7,  1.7321303136116663E-6,  2.9464529177220853E-6,
      4.70841835601366E-6,    7.0681731091607814E-6,  9.96772173790034E-6,
      1.320508583762077E-5,   1.643399484969634E-5,   1.9213286523034621E-5,
      2.1101667084725539E-5,  2.1771505901906385E-5,  2.1101667084725539E-5,
      1.9213286523034621E-5,  1.643399484969634E-5,   1.320508583762077E-5,
      9.96772173790034E-6,    7.0681731091607814E-6,  4.70841835601366E-6,
      2.9464529177220853E-6,  1.7321303136116663E-6,  9.5657320969368355E-7,
      4.9626364363668783E-7,  2.418595836966E-7,      1.1073138628049746E-7,
      4.762497578988648E-8};
  static const double x_h[29][29]{
      {4.762497578988648E-8,  1.1073138628049746E-7, 2.418595836966E-7,
       4.9626364363668783E-7, 9.5657320969368355E-7, 1.7321303136116663E-6,
       2.9464529177220853E-6, 4.70841835601366E-6,   7.0681731091607814E-6,
       9.96772173790034E-6,   1.320508583762077E-5,  1.643399484969634E-5,
       1.9213286523034621E-5, 2.1101667084725539E-5, 2.1771505901906385E-5,
       2.1101667084725539E-5, 1.9213286523034621E-5, 1.643399484969634E-5,
       1.320508583762077E-5,  9.96772173790034E-6,   7.0681731091607814E-6,
       4.70841835601366E-6,   2.9464529177220853E-6, 1.7321303136116663E-6,
       9.5657320969368355E-7, 4.9626364363668783E-7, 2.418595836966E-7,
       1.1073138628049746E-7, 4.762497578988648E-8},
      {1.1073138628049746E-7, 2.5745818668121091E-7, 5.6234038010021961E-7,
       1.15384754131824E-6,   2.2240993476926882E-6, 4.02732363982478E-6,
       6.8507082844306217E-6, 1.0947400667459241E-5, 1.643399484969634E-5,
       2.317564739487682E-5,  3.0702744442407152E-5, 3.8210182822179428E-5,
       4.4672229568919093E-5, 4.9062845919963714E-5, 5.0620267831066813E-5,
       4.9062845919963714E-5, 4.4672229568919093E-5, 3.8210182822179428E-5,
       3.0702744442407152E-5, 2.317564739487682E-5,  1.643399484969634E-5,
       1.0947400667459241E-5, 6.8507082844306217E-6, 4.02732363982478E-6,
       2.2240993476926882E-6, 1.15384754131824E-6,   5.6234038010021961E-7,
       2.5745818668121091E-7, 1.1073138628049746E-7},
      {2.418595836966E-7,      5.6234038010021961E-7,  1.2282643141692625E-6,
       2.5202347353049072E-6,  4.8578795985648562E-6,  8.79648355952219E-6,
       1.4963322589514633E-5,  2.3911321414187913E-5,  3.5895144875646433E-5,
       5.0620267831066813E-5,  6.70609593053704E-5,    8.3458712301617293E-5,
       9.75731200453745E-5,    0.00010716310783930649, 0.00011056483004031986,
       0.00010716310783930649, 9.75731200453745E-5,    8.3458712301617293E-5,
       6.70609593053704E-5,    5.0620267831066813E-5,  3.5895144875646433E-5,
       2.3911321414187913E-5,  1.4963322589514633E-5,  8.79648355952219E-6,
       4.8578795985648562E-6,  2.5202347353049072E-6,  1.2282643141692625E-6,
       5.6234038010021961E-7,  2.418595836966E-7},
      {4.9626364363668783E-7,  1.15384754131824E-6,    2.5202347353049072E-6,
       5.1711859147624051E-6,  9.96772173790034E-6,    1.8049212339316831E-5,
       3.0702744442407152E-5,  4.9062845919963714E-5,  7.3652055099876124E-5,
       0.00010386604562762829, 0.00013760015419691886, 0.00017124615872978079,
       0.00020020704300665763, 0.00021988442031918191, 0.00022686430107607769,
       0.00021988442031918191, 0.00020020704300665763, 0.00017124615872978079,
       0.00013760015419691886, 0.00010386604562762829, 7.3652055099876124E-5,
       4.9062845919963714E-5,  3.0702744442407152E-5,  1.8049212339316831E-5,
       9.96772173790034E-6,    5.1711859147624051E-6,  2.5202347353049072E-6,
       1.15384754131824E-6,    4.9626364363668783E-7},
      {9.5657320969368355E-7,  2.2240993476926882E-6,  4.8578795985648562E-6,
       9.96772173790034E-6,    1.9213286523034621E-5,  3.4790767369819757E-5,
       5.9181088871340979E-5,  9.4571110739526937E-5,  0.00014196805196353105,
       0.00020020704300665763, 0.00026523123916539452, 0.00033008561034905177,
       0.00038590917587419588, 0.00042383831337106868, 0.00043729238566613893,
       0.00042383831337106868, 0.00038590917587419588, 0.00033008561034905177,
       0.00026523123916539452, 0.00020020704300665763, 0.00014196805196353105,
       9.4571110739526937E-5,  5.9181088871340979E-5,  3.4790767369819757E-5,
       1.9213286523034621E-5,  9.96772173790034E-6,    4.8578795985648562E-6,
       2.2240993476926882E-6,  9.5657320969368355E-7},
      {1.7321303136116663E-6,  4.02732363982478E-6,    8.79648355952219E-6,
       1.8049212339316831E-5,  3.4790767369819757E-5,  6.2997941176267855E-5,
       0.00010716310783930649, 0.00017124615872978079, 0.00025707093182044413,
       0.00036252812087580268, 0.00048027172914687926, 0.000597707824114883,
       0.00069879124259254743, 0.00076747203791663592, 0.00079183421556039055,
       0.00076747203791663592, 0.00069879124259254743, 0.000597707824114883,
       0.00048027172914687926, 0.00036252812087580268, 0.00025707093182044413,
       0.00017124615872978079, 0.00010716310783930649, 6.2997941176267855E-5,
       3.4790767369819757E-5,  1.8049212339316831E-5,  8.79648355952219E-6,
       4.02732363982478E-6,    1.7321303136116663E-6},
      {2.9464529177220853E-6,  6.8507082844306217E-6,  1.4963322589514633E-5,
       3.0702744442407152E-5,  5.9181088871340979E-5,  0.00010716310783930649,
       0.00018229058707881985, 0.00029129952872078386, 0.00043729238566613893,
       0.00061668110714116378, 0.00081696973173665637, 0.0010167352585825414,
       0.00118868394567977,    0.0013055139140625664,  0.0013469553742324028,
       0.0013055139140625664,  0.00118868394567977,    0.0010167352585825414,
       0.00081696973173665637, 0.00061668110714116378, 0.00043729238566613893,
       0.00029129952872078386, 0.00018229058707881985, 0.00010716310783930649,
       5.9181088871340979E-5,  3.0702744442407152E-5,  1.4963322589514633E-5,
       6.8507082844306217E-6,  2.9464529177220853E-6},
      {4.70841835601366E-6,    1.0947400667459241E-5,  2.3911321414187913E-5,
       4.9062845919963714E-5,  9.4571110739526937E-5,  0.00017124615872978079,
       0.00029129952872078386, 0.00046549532146857644, 0.00069879124259254743,
       0.00098545360328209861, 0.0013055139140625664,  0.0016247383170192816,
       0.0018995115366256382,  0.0020862052945192231,  0.0021524285593099318,
       0.0020862052945192231,  0.0018995115366256382,  0.0016247383170192816,
       0.0013055139140625664,  0.00098545360328209861, 0.00069879124259254743,
       0.00046549532146857644, 0.00029129952872078386, 0.00017124615872978079,
       9.4571110739526937E-5,  4.9062845919963714E-5,  2.3911321414187913E-5,
       1.0947400667459241E-5,  4.70841835601366E-6},
      {7.0681731091607814E-6,  1.643399484969634E-5,   3.5895144875646433E-5,
       7.3652055099876124E-5,  0.00014196805196353105, 0.00025707093182044413,
       0.00043729238566613893, 0.00069879124259254743, 0.0010490099002144323,
       0.0014793410721772144,  0.0019598085053819927,  0.0024390210923189073,
       0.0028515045496265278,  0.0031317650743749757,  0.0032311779693223177,
       0.0031317650743749757,  0.0028515045496265278,  0.0024390210923189073,
       0.0019598085053819927,  0.0014793410721772144,  0.0010490099002144323,
       0.00069879124259254743, 0.00043729238566613893, 0.00025707093182044413,
       0.00014196805196353105, 7.3652055099876124E-5,  3.5895144875646433E-5,
       1.643399484969634E-5,   7.0681731091607814E-6},
      {9.96772173790034E-6,    2.317564739487682E-5,   5.0620267831066813E-5,
       0.00010386604562762829, 0.00020020704300665763, 0.00036252812087580268,
       0.00061668110714116378, 0.00098545360328209861, 0.0014793410721772144,
       0.0020862052945192231,  0.0027637729777585307,  0.0034395710441210686,
       0.0040212659545924428,  0.0044164966431546448,  0.0045566912958167217,
       0.0044164966431546448,  0.0040212659545924428,  0.0034395710441210686,
       0.0027637729777585307,  0.0020862052945192231,  0.0014793410721772144,
       0.00098545360328209861, 0.00061668110714116378, 0.00036252812087580268,
       0.00020020704300665763, 0.00010386604562762829, 5.0620267831066813E-5,
       2.317564739487682E-5,   9.96772173790034E-6},
      {1.320508583762077E-5,   3.0702744442407152E-5,  6.70609593053704E-5,
       0.00013760015419691886, 0.00026523123916539452, 0.00048027172914687926,
       0.00081696973173665637, 0.0013055139140625664,  0.0019598085053819927,
       0.0027637729777585307,  0.0036614043175211934,  0.0045566912958167217,
       0.0053273118474393517,  0.0058509074398284712,  0.0060366351789304775,
       0.0058509074398284712,  0.0053273118474393517,  0.0045566912958167217,
       0.0036614043175211934,  0.0027637729777585307,  0.0019598085053819927,
       0.0013055139140625664,  0.00081696973173665637, 0.00048027172914687926,
       0.00026523123916539452, 0.00013760015419691886, 6.70609593053704E-5,
       3.0702744442407152E-5,  1.320508583762077E-5},
      {1.643399484969634E-5,   3.8210182822179428E-5,  8.3458712301617293E-5,
       0.00017124615872978079, 0.00033008561034905177, 0.000597707824114883,
       0.0010167352585825414,  0.0016247383170192816,  0.0024390210923189073,
       0.0034395710441210686,  0.0045566912958167217,  0.0056708939425266546,
       0.0066299467144788158,  0.0072815719575447758,  0.0075127138634271586,
       0.0072815719575447758,  0.0066299467144788158,  0.0056708939425266546,
       0.0045566912958167217,  0.0034395710441210686,  0.0024390210923189073,
       0.0016247383170192816,  0.0010167352585825414,  0.000597707824114883,
       0.00033008561034905177, 0.00017124615872978079, 8.3458712301617293E-5,
       3.8210182822179428E-5,  1.643399484969634E-5},
      {1.9213286523034621E-5,  4.4672229568919093E-5,  9.75731200453745E-5,
       0.00020020704300665763, 0.00038590917587419588, 0.00069879124259254743,
       0.00118868394567977,    0.0018995115366256382,  0.0028515045496265278,
       0.0040212659545924428,  0.0053273118474393517,  0.0066299467144788158,
       0.0077511930010180849,  0.0085130200926761858,  0.0087832523585260544,
       0.0085130200926761858,  0.0077511930010180849,  0.0066299467144788158,
       0.0053273118474393517,  0.0040212659545924428,  0.0028515045496265278,
       0.0018995115366256382,  0.00118868394567977,    0.00069879124259254743,
       0.00038590917587419588, 0.00020020704300665763, 9.75731200453745E-5,
       4.4672229568919093E-5,  1.9213286523034621E-5},
      {2.1101667084725539E-5,  4.9062845919963714E-5,  0.00010716310783930649,
       0.00021988442031918191, 0.00042383831337106868, 0.00076747203791663592,
       0.0013055139140625664,  0.0020862052945192231,  0.0031317650743749757,
       0.0044164966431546448,  0.0058509074398284712,  0.0072815719575447758,
       0.0085130200926761858,  0.0093497234669282052,  0.00964651554894283,
       0.0093497234669282052,  0.0085130200926761858,  0.0072815719575447758,
       0.0058509074398284712,  0.0044164966431546448,  0.0031317650743749757,
       0.0020862052945192231,  0.0013055139140625664,  0.00076747203791663592,
       0.00042383831337106868, 0.00021988442031918191, 0.00010716310783930649,
       4.9062845919963714E-5,  2.1101667084725539E-5},
      {2.1771505901906385E-5,  5.0620267831066813E-5,  0.00011056483004031986,
       0.00022686430107607769, 0.00043729238566613893, 0.00079183421556039055,
       0.0013469553742324028,  0.0021524285593099318,  0.0032311779693223177,
       0.0045566912958167217,  0.0060366351789304775,  0.0075127138634271586,
       0.0087832523585260544,  0.00964651554894283,    0.0099527288229593527,
       0.00964651554894283,    0.0087832523585260544,  0.0075127138634271586,
       0.0060366351789304775,  0.0045566912958167217,  0.0032311779693223177,
       0.0021524285593099318,  0.0013469553742324028,  0.00079183421556039055,
       0.00043729238566613893, 0.00022686430107607769, 0.00011056483004031986,
       5.0620267831066813E-5,  2.1771505901906385E-5},
      {2.1101667084725539E-5,  4.9062845919963714E-5,  0.00010716310783930649,
       0.00021988442031918191, 0.00042383831337106868, 0.00076747203791663592,
       0.0013055139140625664,  0.0020862052945192231,  0.0031317650743749757,
       0.0044164966431546448,  0.0058509074398284712,  0.0072815719575447758,
       0.0085130200926761858,  0.0093497234669282052,  0.00964651554894283,
       0.0093497234669282052,  0.0085130200926761858,  0.0072815719575447758,
       0.0058509074398284712,  0.0044164966431546448,  0.0031317650743749757,
       0.0020862052945192231,  0.0013055139140625664,  0.00076747203791663592,
       0.00042383831337106868, 0.00021988442031918191, 0.00010716310783930649,
       4.9062845919963714E-5,  2.1101667084725539E-5},
      {1.9213286523034621E-5,  4.4672229568919093E-5,  9.75731200453745E-5,
       0.00020020704300665763, 0.00038590917587419588, 0.00069879124259254743,
       0.00118868394567977,    0.0018995115366256382,  0.0028515045496265278,
       0.0040212659545924428,  0.0053273118474393517,  0.0066299467144788158,
       0.0077511930010180849,  0.0085130200926761858,  0.0087832523585260544,
       0.0085130200926761858,  0.0077511930010180849,  0.0066299467144788158,
       0.0053273118474393517,  0.0040212659545924428,  0.0028515045496265278,
       0.0018995115366256382,  0.00118868394567977,    0.00069879124259254743,
       0.00038590917587419588, 0.00020020704300665763, 9.75731200453745E-5,
       4.4672229568919093E-5,  1.9213286523034621E-5},
      {1.643399484969634E-5,   3.8210182822179428E-5,  8.3458712301617293E-5,
       0.00017124615872978079, 0.00033008561034905177, 0.000597707824114883,
       0.0010167352585825414,  0.0016247383170192816,  0.0024390210923189073,
       0.0034395710441210686,  0.0045566912958167217,  0.0056708939425266546,
       0.0066299467144788158,  0.0072815719575447758,  0.0075127138634271586,
       0.0072815719575447758,  0.0066299467144788158,  0.0056708939425266546,
       0.0045566912958167217,  0.0034395710441210686,  0.0024390210923189073,
       0.0016247383170192816,  0.0010167352585825414,  0.000597707824114883,
       0.00033008561034905177, 0.00017124615872978079, 8.3458712301617293E-5,
       3.8210182822179428E-5,  1.643399484969634E-5},
      {1.320508583762077E-5,   3.0702744442407152E-5,  6.70609593053704E-5,
       0.00013760015419691886, 0.00026523123916539452, 0.00048027172914687926,
       0.00081696973173665637, 0.0013055139140625664,  0.0019598085053819927,
       0.0027637729777585307,  0.0036614043175211934,  0.0045566912958167217,
       0.0053273118474393517,  0.0058509074398284712,  0.0060366351789304775,
       0.0058509074398284712,  0.0053273118474393517,  0.0045566912958167217,
       0.0036614043175211934,  0.0027637729777585307,  0.0019598085053819927,
       0.0013055139140625664,  0.00081696973173665637, 0.00048027172914687926,
       0.00026523123916539452, 0.00013760015419691886, 6.70609593053704E-5,
       3.0702744442407152E-5,  1.320508583762077E-5},
      {9.96772173790034E-6,    2.317564739487682E-5,   5.0620267831066813E-5,
       0.00010386604562762829, 0.00020020704300665763, 0.00036252812087580268,
       0.00061668110714116378, 0.00098545360328209861, 0.0014793410721772144,
       0.0020862052945192231,  0.0027637729777585307,  0.0034395710441210686,
       0.0040212659545924428,  0.0044164966431546448,  0.0045566912958167217,
       0.0044164966431546448,  0.0040212659545924428,  0.0034395710441210686,
       0.0027637729777585307,  0.0020862052945192231,  0.0014793410721772144,
       0.00098545360328209861, 0.00061668110714116378, 0.00036252812087580268,
       0.00020020704300665763, 0.00010386604562762829, 5.0620267831066813E-5,
       2.317564739487682E-5,   9.96772173790034E-6},
      {7.0681731091607814E-6,  1.643399484969634E-5,   3.5895144875646433E-5,
       7.3652055099876124E-5,  0.00014196805196353105, 0.00025707093182044413,
       0.00043729238566613893, 0.00069879124259254743, 0.0010490099002144323,
       0.0014793410721772144,  0.0019598085053819927,  0.0024390210923189073,
       0.0028515045496265278,  0.0031317650743749757,  0.0032311779693223177,
       0.0031317650743749757,  0.0028515045496265278,  0.0024390210923189073,
       0.0019598085053819927,  0.0014793410721772144,  0.0010490099002144323,
       0.00069879124259254743, 0.00043729238566613893, 0.00025707093182044413,
       0.00014196805196353105, 7.3652055099876124E-5,  3.5895144875646433E-5,
       1.643399484969634E-5,   7.0681731091607814E-6},
      {4.70841835601366E-6,    1.0947400667459241E-5,  2.3911321414187913E-5,
       4.9062845919963714E-5,  9.4571110739526937E-5,  0.00017124615872978079,
       0.00029129952872078386, 0.00046549532146857644, 0.00069879124259254743,
       0.00098545360328209861, 0.0013055139140625664,  0.0016247383170192816,
       0.0018995115366256382,  0.0020862052945192231,  0.0021524285593099318,
       0.0020862052945192231,  0.0018995115366256382,  0.0016247383170192816,
       0.0013055139140625664,  0.00098545360328209861, 0.00069879124259254743,
       0.00046549532146857644, 0.00029129952872078386, 0.00017124615872978079,
       9.4571110739526937E-5,  4.9062845919963714E-5,  2.3911321414187913E-5,
       1.0947400667459241E-5,  4.70841835601366E-6},
      {2.9464529177220853E-6,  6.8507082844306217E-6,  1.4963322589514633E-5,
       3.0702744442407152E-5,  5.9181088871340979E-5,  0.00010716310783930649,
       0.00018229058707881985, 0.00029129952872078386, 0.00043729238566613893,
       0.00061668110714116378, 0.00081696973173665637, 0.0010167352585825414,
       0.00118868394567977,    0.0013055139140625664,  0.0013469553742324028,
       0.0013055139140625664,  0.00118868394567977,    0.0010167352585825414,
       0.00081696973173665637, 0.00061668110714116378, 0.00043729238566613893,
       0.00029129952872078386, 0.00018229058707881985, 0.00010716310783930649,
       5.9181088871340979E-5,  3.0702744442407152E-5,  1.4963322589514633E-5,
       6.8507082844306217E-6,  2.9464529177220853E-6},
      {1.7321303136116663E-6,  4.02732363982478E-6,    8.79648355952219E-6,
       1.8049212339316831E-5,  3.4790767369819757E-5,  6.2997941176267855E-5,
       0.00010716310783930649, 0.00017124615872978079, 0.00025707093182044413,
       0.00036252812087580268, 0.00048027172914687926, 0.000597707824114883,
       0.00069879124259254743, 0.00076747203791663592, 0.00079183421556039055,
       0.00076747203791663592, 0.00069879124259254743, 0.000597707824114883,
       0.00048027172914687926, 0.00036252812087580268, 0.00025707093182044413,
       0.00017124615872978079, 0.00010716310783930649, 6.2997941176267855E-5,
       3.4790767369819757E-5,  1.8049212339316831E-5,  8.79648355952219E-6,
       4.02732363982478E-6,    1.7321303136116663E-6},
      {9.5657320969368355E-7,  2.2240993476926882E-6,  4.8578795985648562E-6,
       9.96772173790034E-6,    1.9213286523034621E-5,  3.4790767369819757E-5,
       5.9181088871340979E-5,  9.4571110739526937E-5,  0.00014196805196353105,
       0.00020020704300665763, 0.00026523123916539452, 0.00033008561034905177,
       0.00038590917587419588, 0.00042383831337106868, 0.00043729238566613893,
       0.00042383831337106868, 0.00038590917587419588, 0.00033008561034905177,
       0.00026523123916539452, 0.00020020704300665763, 0.00014196805196353105,
       9.4571110739526937E-5,  5.9181088871340979E-5,  3.4790767369819757E-5,
       1.9213286523034621E-5,  9.96772173790034E-6,    4.8578795985648562E-6,
       2.2240993476926882E-6,  9.5657320969368355E-7},
      {4.9626364363668783E-7,  1.15384754131824E-6,    2.5202347353049072E-6,
       5.1711859147624051E-6,  9.96772173790034E-6,    1.8049212339316831E-5,
       3.0702744442407152E-5,  4.9062845919963714E-5,  7.3652055099876124E-5,
       0.00010386604562762829, 0.00013760015419691886, 0.00017124615872978079,
       0.00020020704300665763, 0.00021988442031918191, 0.00022686430107607769,
       0.00021988442031918191, 0.00020020704300665763, 0.00017124615872978079,
       0.00013760015419691886, 0.00010386604562762829, 7.3652055099876124E-5,
       4.9062845919963714E-5,  3.0702744442407152E-5,  1.8049212339316831E-5,
       9.96772173790034E-6,    5.1711859147624051E-6,  2.5202347353049072E-6,
       1.15384754131824E-6,    4.9626364363668783E-7},
      {2.418595836966E-7,      5.6234038010021961E-7,  1.2282643141692625E-6,
       2.5202347353049072E-6,  4.8578795985648562E-6,  8.79648355952219E-6,
       1.4963322589514633E-5,  2.3911321414187913E-5,  3.5895144875646433E-5,
       5.0620267831066813E-5,  6.70609593053704E-5,    8.3458712301617293E-5,
       9.75731200453745E-5,    0.00010716310783930649, 0.00011056483004031986,
       0.00010716310783930649, 9.75731200453745E-5,    8.3458712301617293E-5,
       6.70609593053704E-5,    5.0620267831066813E-5,  3.5895144875646433E-5,
       2.3911321414187913E-5,  1.4963322589514633E-5,  8.79648355952219E-6,
       4.8578795985648562E-6,  2.5202347353049072E-6,  1.2282643141692625E-6,
       5.6234038010021961E-7,  2.418595836966E-7},
      {1.1073138628049746E-7, 2.5745818668121091E-7, 5.6234038010021961E-7,
       1.15384754131824E-6,   2.2240993476926882E-6, 4.02732363982478E-6,
       6.8507082844306217E-6, 1.0947400667459241E-5, 1.643399484969634E-5,
       2.317564739487682E-5,  3.0702744442407152E-5, 3.8210182822179428E-5,
       4.4672229568919093E-5, 4.9062845919963714E-5, 5.0620267831066813E-5,
       4.9062845919963714E-5, 4.4672229568919093E-5, 3.8210182822179428E-5,
       3.0702744442407152E-5, 2.317564739487682E-5,  1.643399484969634E-5,
       1.0947400667459241E-5, 6.8507082844306217E-6, 4.02732363982478E-6,
       2.2240993476926882E-6, 1.15384754131824E-6,   5.6234038010021961E-7,
       2.5745818668121091E-7, 1.1073138628049746E-7},
      {4.762497578988648E-8,  1.1073138628049746E-7, 2.418595836966E-7,
       4.9626364363668783E-7, 9.5657320969368355E-7, 1.7321303136116663E-6,
       2.9464529177220853E-6, 4.70841835601366E-6,   7.0681731091607814E-6,
       9.96772173790034E-6,   1.320508583762077E-5,  1.643399484969634E-5,
       1.9213286523034621E-5, 2.1101667084725539E-5, 2.1771505901906385E-5,
       2.1101667084725539E-5, 1.9213286523034621E-5, 1.643399484969634E-5,
       1.320508583762077E-5,  9.96772173790034E-6,   7.0681731091607814E-6,
       4.70841835601366E-6,   2.9464529177220853E-6, 1.7321303136116663E-6,
       9.5657320969368355E-7, 4.9626364363668783E-7, 2.418595836966E-7,
       1.1073138628049746E-7, 4.762497578988648E-8}};
  ::coder::array<double, 2U> b_b;
  ::coder::array<double, 2U> c_a;
  ::coder::array<double, 1U> nonzero_h;
  ::coder::array<float, 2U> b_a;
  ::coder::array<signed char, 1U> r;
  ::coder::array<signed char, 1U> r1;
  double a__1[29][29];
  double a__2[29][29];
  double c_u[29][29];
  double e_v[29][29];
  double s[29][29];
  double b_s[29];
  double hcol[29];
  double hrow[29];
  double connDimsT[2];
  double finalSize[2];
  double kernelSizeT[2];
  double out_size_row[2];
  double pad[2];
  double padSizeT[2];
  double start[2];
  int b_loop_ub;
  int f_loop_ub;
  int h_loop_ub;
  int i11;
  int i13;
  int i3;
  int i5;
  bool conn[29][29];
  bool b_x[29];
  bool connb[29];
  finalSize[0] = static_cast<double>(varargin_1.size(0));
  pad[0] = 14.0;
  finalSize[1] = static_cast<double>(varargin_1.size(1));
  pad[1] = 14.0;
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    double c_ex;
    double tol;
    int idx;
    int y;
    svd(x_h, a__1, s, a__2);
#pragma omp parallel for num_threads(omp_get_max_threads())

    for (int k = 0; k < 29; k++) {
      b_s[k] = s[k][k];
    }
    if (!std::isnan(b_s[0])) {
      idx = 1;
    } else {
      int b_k;
      bool exitg1;
      idx = 0;
      b_k = 2;
      exitg1 = false;
      while ((!exitg1) && (b_k <= 29)) {
        if (!std::isnan(b_s[b_k - 1])) {
          idx = b_k;
          exitg1 = true;
        } else {
          b_k++;
        }
      }
    }
    if (idx == 0) {
      c_ex = b_s[0];
    } else {
      double b_ex;
      int b_i;
      b_ex = b_s[idx - 1];
      b_i = idx + 1;
      for (int c_k{b_i}; c_k < 30; c_k++) {
        double d;
        d = b_s[c_k - 1];
        if (b_ex < d) {
          b_ex = d;
        }
      }
      c_ex = b_ex;
    }
    tol = (29.0 * c_ex) * 2.2204460492503131E-16;
#pragma omp parallel for num_threads(omp_get_max_threads())

    for (int c_i = 0; c_i < 29; c_i++) {
      b_x[c_i] = (b_s[c_i] > tol);
    }
    y = static_cast<int>(b_x[0]);
    for (int d_k{0}; d_k < 28; d_k++) {
      y += static_cast<int>(b_x[d_k + 1]);
    }
    if (y == 1) {
      double b;
      double b_y;
      int b_partialTrueCount;
      int b_trueCount;
      int c_loop_ub;
      int d_loop_ub;
      int e_loop_ub;
      int g_loop_ub;
      int loop_ub;
      int partialTrueCount;
      int trueCount;
      bool b_modeFlag;
      bool b_tooBig;
      bool c_modeFlag;
      bool c_tooBig;
      bool modeFlag;
      padImage(varargin_1, pad, b_a);
      svd(x_h, c_u, s, e_v);
#pragma omp parallel for num_threads(omp_get_max_threads())

      for (int e_k = 0; e_k < 29; e_k++) {
        b_s[e_k] = s[e_k][e_k];
      }
      double b_tmp;
      b_tmp = std::sqrt(b_s[0]);
      b = b_tmp;
      b_y = b_tmp;
#pragma omp parallel for num_threads(omp_get_max_threads())

      for (int i1 = 0; i1 < 29; i1++) {
        hcol[i1] = c_u[0][i1] * b;
        hrow[i1] = e_v[0][i1] * b_y;
      }
      c_a.set_size(b_a.size(0), b_a.size(1));
      loop_ub = b_a.size(1);
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i5,        \
                                                                    b_loop_ub)

      for (int i4 = 0; i4 < loop_ub; i4++) {
        b_loop_ub = b_a.size(0);
        for (i5 = 0; i5 < b_loop_ub; i5++) {
          c_a[i5 + (c_a.size(0) * i4)] =
              static_cast<double>(b_a[i5 + (b_a.size(0) * i4)]);
        }
      }
      out_size_row[0] = static_cast<double>(c_a.size(0));
      out_size_row[1] = static_cast<double>(varargin_1.size(1));
      start[0] = 0.0;
      start[1] = 14.0;
      trueCount = 0;
      for (int d_i{0}; d_i < 29; d_i++) {
        if (hrow[d_i] != 0.0) {
          trueCount++;
        }
      }
      r.set_size(trueCount);
      partialTrueCount = 0;
      for (int e_i{0}; e_i < 29; e_i++) {
        if (hrow[e_i] != 0.0) {
          r[partialTrueCount] = static_cast<signed char>(e_i + 1);
          partialTrueCount++;
        }
      }
      nonzero_h.set_size(r.size(0));
      c_loop_ub = r.size(0);
      if ((static_cast<int>(r.size(0) < 4)) != 0) {
        for (int i6{0}; i6 < c_loop_ub; i6++) {
          nonzero_h[i6] = hrow[r[i6] - 1];
        }
      } else {
#pragma omp parallel for num_threads(omp_get_max_threads())

        for (int i6 = 0; i6 < c_loop_ub; i6++) {
          nonzero_h[i6] = hrow[r[i6] - 1];
        }
      }
#pragma omp parallel for num_threads(omp_get_max_threads())

      for (int i7 = 0; i7 < 29; i7++) {
        connb[i7] = (hrow[i7] != 0.0);
      }
      b_tooBig = true;
      if ((out_size_row[0] <= 65500.0) || (!(out_size_row[1] > 65500.0))) {
        b_tooBig = false;
      }
      if (((static_cast<double>(r.size(0))) / 29.0) > 0.05) {
        if (!b_tooBig) {
          modeFlag = true;
        } else {
          modeFlag = false;
        }
      } else {
        modeFlag = false;
      }
      b_b.set_size(static_cast<int>(out_size_row[0]),
                   static_cast<int>(out_size_row[1]));
      if (modeFlag) {
        padSizeT[0] = static_cast<double>(c_a.size(0));
        kernelSizeT[0] = 1.0;
        padSizeT[1] = static_cast<double>(c_a.size(1));
        kernelSizeT[1] = 29.0;
        ippfilter_real64(&c_a[0], &b_b[0], &out_size_row[0], 2.0, &padSizeT[0],
                         &hrow[0], &kernelSizeT[0], true);
      } else {
        padSizeT[0] = static_cast<double>(c_a.size(0));
        connDimsT[0] = 1.0;
        padSizeT[1] = static_cast<double>(c_a.size(1));
        connDimsT[1] = 29.0;
        imfilter_real64(&c_a[0], &b_b[0], 2.0, &out_size_row[0], 2.0,
                        &padSizeT[0], &(nonzero_h.data())[0],
                        static_cast<double>(r.size(0)), &connb[0], 2.0,
                        &connDimsT[0], &start[0], 2.0, true, true);
      }
      start[0] = 14.0;
      start[1] = 0.0;
      b_trueCount = 0;
      for (int g_i{0}; g_i < 29; g_i++) {
        if (hcol[g_i] != 0.0) {
          b_trueCount++;
        }
      }
      r1.set_size(b_trueCount);
      b_partialTrueCount = 0;
      for (int h_i{0}; h_i < 29; h_i++) {
        if (hcol[h_i] != 0.0) {
          r1[b_partialTrueCount] = static_cast<signed char>(h_i + 1);
          b_partialTrueCount++;
        }
      }
      nonzero_h.set_size(r1.size(0));
      d_loop_ub = r1.size(0);
      if ((static_cast<int>(r1.size(0) < 4)) != 0) {
        for (int b_i8{0}; b_i8 < d_loop_ub; b_i8++) {
          nonzero_h[b_i8] = hcol[r1[b_i8] - 1];
        }
      } else {
#pragma omp parallel for num_threads(omp_get_max_threads())

        for (int b_i8 = 0; b_i8 < d_loop_ub; b_i8++) {
          nonzero_h[b_i8] = hcol[r1[b_i8] - 1];
        }
      }
#pragma omp parallel for num_threads(omp_get_max_threads())

      for (int i9 = 0; i9 < 29; i9++) {
        connb[i9] = (hcol[i9] != 0.0);
      }
      c_tooBig = true;
      if ((finalSize[0] <= 65500.0) || (!(finalSize[1] > 65500.0))) {
        c_tooBig = false;
      }
      if (((static_cast<double>(r1.size(0))) / 29.0) > 0.05) {
        if (!c_tooBig) {
          b_modeFlag = true;
        } else {
          b_modeFlag = false;
        }
      } else {
        b_modeFlag = false;
      }
      c_modeFlag = b_modeFlag;
      c_a.set_size(b_b.size(0), b_b.size(1));
      e_loop_ub = b_b.size(1);
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i11,       \
                                                                    f_loop_ub)

      for (int i10 = 0; i10 < e_loop_ub; i10++) {
        f_loop_ub = b_b.size(0);
        for (i11 = 0; i11 < f_loop_ub; i11++) {
          c_a[i11 + (c_a.size(0) * i10)] = b_b[i11 + (b_b.size(0) * i10)];
        }
      }
      b_b.set_size(static_cast<int>(finalSize[0]),
                   static_cast<int>(finalSize[1]));
      if (c_modeFlag) {
        padSizeT[0] = static_cast<double>(c_a.size(0));
        kernelSizeT[0] = 29.0;
        padSizeT[1] = static_cast<double>(c_a.size(1));
        kernelSizeT[1] = 1.0;
        ippfilter_real64(&c_a[0], &b_b[0], &finalSize[0], 2.0, &padSizeT[0],
                         &hcol[0], &kernelSizeT[0], true);
      } else {
        padSizeT[0] = static_cast<double>(c_a.size(0));
        connDimsT[0] = 29.0;
        padSizeT[1] = static_cast<double>(c_a.size(1));
        connDimsT[1] = 1.0;
        imfilter_real64(&c_a[0], &b_b[0], 2.0, &finalSize[0], 2.0, &padSizeT[0],
                        &(nonzero_h.data())[0], static_cast<double>(r1.size(0)),
                        &connb[0], 2.0, &connDimsT[0], &start[0], 2.0, true,
                        true);
      }
      varargin_1.set_size(b_b.size(0), b_b.size(1));
      g_loop_ub = b_b.size(1);
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i13,       \
                                                                    h_loop_ub)

      for (int i12 = 0; i12 < g_loop_ub; i12++) {
        h_loop_ub = b_b.size(0);
        for (i13 = 0; i13 < h_loop_ub; i13++) {
          varargin_1[i13 + (varargin_1.size(0) * i12)] =
              static_cast<float>(b_b[i13 + (b_b.size(0) * i12)]);
        }
      }
    } else {
      bool tooBig;
      padImage(varargin_1, pad, b_a);
      tooBig = true;
      if ((finalSize[0] <= 65500.0) || (!(finalSize[1] > 65500.0))) {
        tooBig = false;
      }
      varargin_1.set_size(static_cast<int>(finalSize[0]),
                          static_cast<int>(finalSize[1]));
      if (!tooBig) {
        padSizeT[0] = static_cast<double>(b_a.size(0));
        kernelSizeT[0] = 29.0;
        padSizeT[1] = static_cast<double>(b_a.size(1));
        kernelSizeT[1] = 29.0;
        ippfilter_real32(&b_a[0], &varargin_1[0], &finalSize[0], 2.0,
                         &padSizeT[0], &x_h[0][0], &kernelSizeT[0], true);
      } else {
        padSizeT[0] = static_cast<double>(b_a.size(0));
        padSizeT[1] = static_cast<double>(b_a.size(1));
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i3)

        for (int i2 = 0; i2 < 29; i2++) {
          for (i3 = 0; i3 < 29; i3++) {
            conn[i2][i3] = true;
          }
        }
        connDimsT[0] = 29.0;
        connDimsT[1] = 29.0;
        imfilter_real32(&b_a[0], &varargin_1[0], 2.0, &finalSize[0], 2.0,
                        &padSizeT[0], &e_x[0], 841.0, &conn[0][0], 2.0,
                        &connDimsT[0], &pad[0], 2.0, true, true);
      }
    }
  }
}

//
// Arguments    : ::coder::array<float, 2U> &varargin_1
// Return Type  : void
//
void imfilter(::coder::array<float, 2U> &varargin_1)
{
  static const bool conn[3]{true, false, true};
  ::coder::array<float, 2U> b_a;
  double kernel[3];
  double connDimsT[2];
  double finalSize[2];
  double kernelSizeT[2];
  double nonZeroKernel[2];
  double pad[2];
  double padSizeT[2];
  finalSize[0] = static_cast<double>(varargin_1.size(0));
  pad[0] = 1.0;
  finalSize[1] = static_cast<double>(varargin_1.size(1));
  pad[1] = 0.0;
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    bool tooBig;
    padImage(varargin_1, pad, b_a);
    tooBig = true;
    if ((finalSize[0] <= 65500.0) || (!(finalSize[1] > 65500.0))) {
      tooBig = false;
    }
    varargin_1.set_size(static_cast<int>(finalSize[0]),
                        static_cast<int>(finalSize[1]));
    if (!tooBig) {
      padSizeT[0] = static_cast<double>(b_a.size(0));
      padSizeT[1] = static_cast<double>(b_a.size(1));
      kernel[0] = -1.0;
      kernel[1] = 0.0;
      kernel[2] = 1.0;
      kernelSizeT[0] = 3.0;
      kernelSizeT[1] = 1.0;
      ippfilter_real32(&b_a[0], &varargin_1[0], &finalSize[0], 2.0,
                       &padSizeT[0], &kernel[0], &kernelSizeT[0], true);
    } else {
      padSizeT[0] = static_cast<double>(b_a.size(0));
      nonZeroKernel[0] = -1.0;
      connDimsT[0] = 3.0;
      padSizeT[1] = static_cast<double>(b_a.size(1));
      nonZeroKernel[1] = 1.0;
      connDimsT[1] = 1.0;
      imfilter_real32(&b_a[0], &varargin_1[0], 2.0, &finalSize[0], 2.0,
                      &padSizeT[0], &nonZeroKernel[0], 2.0, &conn[0], 2.0,
                      &connDimsT[0], &pad[0], 2.0, true, true);
    }
  }
}

//
// Arguments    : const ::coder::array<float, 2U> &a_tmp
//                const double pad[2]
//                ::coder::array<float, 2U> &b_a
// Return Type  : void
//
void padImage(const ::coder::array<float, 2U> &a_tmp, const double pad[2],
              ::coder::array<float, 2U> &b_a)
{
  int outsize[2];
  int b_loop_ub;
  int c_i;
  int d_i;
  int e_i;
  int g_i;
  int h_i;
  int i10;
  int i11;
  int i12;
  int i13;
  int i3;
  int i6;
  int i7;
  if ((a_tmp.size(0) == 0) || (a_tmp.size(1) == 0)) {
    double sizeB_idx_0;
    double sizeB_idx_1;
    int loop_ub;
    int outsize_tmp;
    sizeB_idx_0 = (static_cast<double>(a_tmp.size(0))) + (2.0 * pad[0]);
    sizeB_idx_1 = (static_cast<double>(a_tmp.size(1))) + (2.0 * pad[1]);
    outsize_tmp = static_cast<int>(sizeB_idx_0);
    outsize[0] = static_cast<int>(sizeB_idx_0);
    b_a.set_size(outsize_tmp, static_cast<int>(sizeB_idx_1));
    loop_ub = static_cast<int>(sizeB_idx_1);
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i6,        \
                                                                    b_loop_ub)

    for (int i4 = 0; i4 < loop_ub; i4++) {
      b_loop_ub = outsize[0];
      for (i6 = 0; i6 < b_loop_ub; i6++) {
        b_a[i6 + (b_a.size(0) * i4)] = 0.0F;
      }
    }
  } else {
    int b_i;
    int b_i8;
    int i1;
    int i2;
    int i5;
    int i9;
    b_a.set_size(static_cast<int>(static_cast<double>(
                     (static_cast<double>(a_tmp.size(0))) + (2.0 * pad[0]))),
                 static_cast<int>(static_cast<double>(
                     (static_cast<double>(a_tmp.size(1))) + (2.0 * pad[1]))));
    b_i = static_cast<int>(pad[1]);
#pragma omp parallel for num_threads(omp_get_max_threads()) private(c_i, i3)

    for (int j = 0; j < b_i; j++) {
      i3 = b_a.size(0);
      for (c_i = 0; c_i < i3; c_i++) {
        b_a[c_i + (b_a.size(0) * j)] = 0.0F;
      }
    }
    i1 = (a_tmp.size(1) + (static_cast<int>(pad[1]))) + 1;
    i2 = b_a.size(1);
#pragma omp parallel for num_threads(omp_get_max_threads()) private(d_i, i7)

    for (int b_j = i1; b_j <= i2; b_j++) {
      i7 = b_a.size(0);
      for (d_i = 0; d_i < i7; d_i++) {
        b_a[d_i + (b_a.size(0) * (b_j - 1))] = 0.0F;
      }
    }
    i5 = a_tmp.size(1);
#pragma omp parallel for num_threads(omp_get_max_threads()) private(e_i, i10)

    for (int c_j = 0; c_j < i5; c_j++) {
      i10 = static_cast<int>(pad[0]);
      for (e_i = 0; e_i < i10; e_i++) {
        b_a[e_i + (b_a.size(0) * (c_j + (static_cast<int>(pad[1]))))] = 0.0F;
      }
    }
    b_i8 = a_tmp.size(1);
#pragma omp parallel for num_threads(omp_get_max_threads()) private(g_i, i11,  \
                                                                    i12)

    for (int d_j = 0; d_j < b_i8; d_j++) {
      i12 = ((static_cast<int>(pad[0])) + a_tmp.size(0)) + 1;
      i11 = b_a.size(0);
      for (g_i = i12; g_i <= i11; g_i++) {
        b_a[(g_i + (b_a.size(0) * (d_j + (static_cast<int>(pad[1]))))) - 1] =
            0.0F;
      }
    }
    i9 = a_tmp.size(1);
#pragma omp parallel for num_threads(omp_get_max_threads()) private(h_i, i13)

    for (int e_j = 0; e_j < i9; e_j++) {
      i13 = a_tmp.size(0);
      for (h_i = 0; h_i < i13; h_i++) {
        b_a[(h_i + (static_cast<int>(pad[0]))) +
            (b_a.size(0) * (e_j + (static_cast<int>(pad[1]))))] =
            a_tmp[h_i + (a_tmp.size(0) * e_j)];
      }
    }
  }
}

} // namespace coder
} // namespace ITER

//
// File trailer for imfilter.cpp
//
// [EOF]
//
